<nesc xmlns="http://www.tinyos.net/nesC">
  <components>
    <component qname="projectSinkAppC" loc="3:projectSinkAppC.nc">
      <configuration/>
    </component>
    <component qname="MainC" loc="47:/opt/tinyos-main-2.1.2/tos/lib/tossim/MainC.nc">
      <configuration/>
    </component>
    <component qname="PlatformC" loc="40:/opt/tinyos-main-2.1.2/tos/platforms/mica/sim/PlatformC.nc">
      <documentation loc="1:/opt/tinyos-main-2.1.2/tos/platforms/micaz/sim/platform_hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: platform_hardware.h,v 1.6 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:/opt/tinyos-main-2.1.2/tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:/opt/tinyos-main-2.1.2/tos/platforms/micaz/sim/platform_hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: platform_hardware.h,v 1.6 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:/opt/tinyos-main-2.1.2/tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="41:/opt/tinyos-main-2.1.2/tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="35:/opt/tinyos-main-2.1.2/tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="42:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOC.nc">
      <documentation loc="36:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:27">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:23">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:22">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:21">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:20">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:19">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:18">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:17">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:16">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:3">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="10:/opt/tinyos-main-2.1.2/tos/platforms/mica/sim/MeasureClockC.nc">
      <documentation loc="3:/opt/tinyos-main-2.1.2/tos/platforms/mica/sim/MeasureClockC.nc">
        <short>&#10; Simulation version of MeasureClockC for the mica platform.</short>
        <long>&#10; Simulation version of MeasureClockC for the mica platform. See &#10; tos/platforms/mica/MeasureClockC.nc for more details.&#10;&#10; @author Phil Levis&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SimMainP" loc="43:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMainP.nc">
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="42:/opt/tinyos-main-2.1.2/tos/lib/tossim/TinySchedulerC.nc">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/lib/tossim/TinySchedulerC.nc">
        <short>&#10; TOSSIM-specific scheduler implementation, which models&#10; tasks as simulation events (in order to capture delay).</short>
        <long>&#10; TOSSIM-specific scheduler implementation, which models&#10; tasks as simulation events (in order to capture delay).&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SimSchedulerBasicP" loc="47:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimSchedulerBasicP.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_event_queue.h">
        <short>&#10; The event queue is the core of the mote side of TOSSIM.</short>
        <long>&#10; The event queue is the core of the mote side of TOSSIM. It is a&#10; wrapper around the underlying heap. Unlike the 1.x version, it is&#10; not re-entrant: merging the Python console and TOSSIM means that&#10; functionality like packet injection/reception from external tools&#10; is on the Python side.&#10;&#10; @author Phil Levis&#10; @date   November 22 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SimMoteP" loc="45:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMoteP.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMoteP.nc">
        <short>&#10; The TOSSIM abstraction of a mote.</short>
        <long>&#10; The TOSSIM abstraction of a mote. By putting simulation state into&#10; a component, we can scale and reference this state automatically&#10; using nesC's rewriting, rather than managing and indexing into&#10; arrays manually.&#10;&#10; @author Phil Levis&#10; @date   August 19 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="42:/opt/tinyos-main-2.1.2/tos/lib/tossim/ActiveMessageC.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/lib/tossim/ActiveMessageC.nc">
        <short>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.</short>
        <long>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.&#10;&#10; @author Philip Levis&#10; @date December 2 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="TossimActiveMessageC" loc="44:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimActiveMessageC.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimActiveMessageC.nc">
        <short>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.</short>
        <long>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.&#10;&#10; @author Philip Levis&#10; @date December 2 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TossimPacketModelC" loc="60:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_csma.h">
        <short>&#10;&#10; Configuration parameters for a CSMA link.</short>
        <long>&#10;&#10; Configuration parameters for a CSMA link.&#10;&#10; @author Philip Levis&#10; @date   Dec 10 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CpmModelC" loc="52:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
        <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="57:/opt/tinyos-main-2.1.2/tos/lib/tossim/ActiveMessageAddressC.nc">
      <documentation loc="49:/opt/tinyos-main-2.1.2/tos/lib/tossim/ActiveMessageAddressC.nc">
        <short>&#10; Accessor methods for Active Messages.</short>
        <long>&#10; Accessor methods for Active Messages.&#10;&#10; @author Philip Levis&#10; @author Morten Tranberg Hansen (added ActiveMessageAddress)&#10; @date June 19 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="projectSinkC" loc="4:projectSinkC.nc">
      <module/>
    </component>
    <component qname="projectSinkAppC.Timer1" loc="44(projectSinkAppC.Timer1):/opt/tinyos-main-2.1.2/tos/system/TimerMilliC.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:/opt/tinyos-main-2.1.2/tos/system/TimerMilliP.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:/opt/tinyos-main-2.1.2/tos/platforms/mica/sim/HilTimerMilliC.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/platforms/mica/sim/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/opt/tinyos-main-2.1.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC):/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="11:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0xb753a2c0"/>
            <typename><typedef-ref name="TMilli" ref="0xb753a488"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP):/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <documentation loc="11:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0xb74c5d50"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0AsyncC" loc="50:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncC.nc">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncC.nc">
        <short>&#10; The TOSSIM implementation of the Atm128 Timer0.</short>
        <long>&#10; The TOSSIM implementation of the Atm128 Timer0. It is built from a&#10; timer-specific counter component and a generic compare&#10; component. The counter component has an additional simulation-only&#10; interface to let the compare component know when its state has&#10; changed (e.g., TCNTX was set).&#10;&#10; @date November 22 2005&#10;&#10; @author Philip Levis &#60;pal@cs.stanford.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0AsyncP" loc="48:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <documentation loc="1:/opt/tinyos-main-2.1.2/tos/platforms/micaz/sim/platform_hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: platform_hardware.h,v 1.6 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):/opt/tinyos-main-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:/opt/tinyos-main-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0xb753a2c0"/>
            <typename><typedef-ref name="TMilli" ref="0xb753a488"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0xb753a2c0"/>
            <typename><typedef-ref name="TMilli" ref="0xb753a488"/></typename>
          </type-tag>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):/opt/tinyos-main-2.1.2/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:/opt/tinyos-main-2.1.2/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0xb753a2c0"/>
            <typename><typedef-ref name="TMilli" ref="0xb753a488"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="projectSinkAppC.Timer2" loc="44(projectSinkAppC.Timer2):/opt/tinyos-main-2.1.2/tos/system/TimerMilliC.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="projectSinkAppC.Timer3" loc="44(projectSinkAppC.Timer3):/opt/tinyos-main-2.1.2/tos/system/TimerMilliC.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="projectSinkAppC.FakeSensorC" loc="8(projectSinkAppC.FakeSensorC):FakeSensorC.nc">
      <documentation loc="1:FakeSensorC.nc">
        <short>&#10;  Configuration file for wiring of FakeSensorP module to other common &#10;  components to simulate the behavior of a real sensor&#10;&#10;  </short>
        <long>&#10;  Configuration file for wiring of FakeSensorP module to other common &#10;  components to simulate the behavior of a real sensor&#10;&#10;  @author Luca Pietro Borsani&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FakeSensorC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RandomC" loc="43:/opt/tinyos-main-2.1.2/tos/system/RandomC.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:/opt/tinyos-main-2.1.2/tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="projectSinkAppC.FakeSensorC.FakeSensorP" loc="8(projectSinkAppC.FakeSensorC.FakeSensorP):FakeSensorP.nc">
      <documentation loc="1:FakeSensorP.nc">
        <short>&#10;  Source file for implementation of module Middleware&#10;  which provides the main logic for middleware message management&#10;&#10;  </short>
        <long>&#10;  Source file for implementation of module Middleware&#10;  which provides the main logic for middleware message management&#10;&#10;  @author Luca Pietro Borsani&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FakeSensorP"/>
      </instance>
      <module/>
    </component>
    <component qname="projectSinkAppC.FakeSensorC.TimerMilliC" loc="44(projectSinkAppC.FakeSensorC.TimerMilliC):/opt/tinyos-main-2.1.2/tos/system/TimerMilliC.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="projectSinkAppC.AMSenderC" loc="47(projectSinkAppC.AMSenderC):/opt/tinyos-main-2.1.2/tos/system/AMSenderC.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="projectSinkAppC.AMSenderC.SenderC" loc="47(projectSinkAppC.AMSenderC.SenderC):/opt/tinyos-main-2.1.2/tos/system/DirectAMSenderC.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb782d648"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="projectSinkAppC.AMSenderC.SenderC.AMQueueEntryP" loc="43(projectSinkAppC.AMSenderC.SenderC.AMQueueEntryP):/opt/tinyos-main-2.1.2/tos/system/AMQueueEntryP.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb782d648"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:/opt/tinyos-main-2.1.2/tos/system/AMQueueP.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="projectSinkAppC.AMReceiverC" loc="43(projectSinkAppC.AMReceiverC):/opt/tinyos-main-2.1.2/tos/system/AMReceiverC.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="FakeSensorP" loc="8:FakeSensorP.nc" abstract="">
      <documentation loc="1:FakeSensorP.nc">
        <short>&#10;  Source file for implementation of module Middleware&#10;  which provides the main logic for middleware message management&#10;&#10;  </short>
        <long>&#10;  Source file for implementation of module Middleware&#10;  which provides the main logic for middleware message management&#10;&#10;  @author Luca Pietro Borsani&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="23:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="11:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0xb74c5d50" loc="23:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0xb74c5d50"/></type-var>
        </typedef>
        <constant name="divider" ref="0xb74c5f10" loc="23:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc" abstract="">
      <documentation loc="37:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0xb7737d38" loc="41:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0xb7734010" loc="42:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0xb7734238" loc="43:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0xb7734428" loc="44:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0xb76eb928" loc="42:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0xb76ebb50" loc="43:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0xb76ebd78" loc="44:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0xb76e8010" loc="45:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb73c1958" loc="46:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb73c1958"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0xb73c1b38" loc="46:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0xb733f210" loc="45:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0xb7740968" loc="40:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0xb7740b80" loc="40:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0xb7740d98" loc="40:/opt/tinyos-main-2.1.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMReceiverC" loc="43:/opt/tinyos-main-2.1.2/tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0xb7308320" loc="43:/opt/tinyos-main-2.1.2/tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb782d648"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmToTimerC" loc="46:/opt/tinyos-main-2.1.2/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:/opt/tinyos-main-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb73da138" loc="46:/opt/tinyos-main-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb73da138"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="FakeSensorC" loc="8:FakeSensorC.nc" abstract="">
      <documentation loc="1:FakeSensorC.nc">
        <short>&#10;  Configuration file for wiring of FakeSensorP module to other common &#10;  components to simulate the behavior of a real sensor&#10;&#10;  </short>
        <long>&#10;  Configuration file for wiring of FakeSensorP module to other common &#10;  components to simulate the behavior of a real sensor&#10;&#10;  @author Luca Pietro Borsani&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncP" loc="23:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="11:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0xb74b9010" loc="23:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0xb74b9010"/></type-var>
        </typedef>
        <constant name="divider" ref="0xb74b91d0" loc="23:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:/opt/tinyos-main-2.1.2/tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0xb73614d8" loc="47:/opt/tinyos-main-2.1.2/tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb782d648"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:/opt/tinyos-main-2.1.2/tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0xb7357af8" loc="43:/opt/tinyos-main-2.1.2/tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb782d648"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="DirectAMSenderC" loc="47:/opt/tinyos-main-2.1.2/tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0xb7359010" loc="47:/opt/tinyos-main-2.1.2/tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb782d648"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:/opt/tinyos-main-2.1.2/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:/opt/tinyos-main-2.1.2/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb7391010" loc="46:/opt/tinyos-main-2.1.2/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb7391010"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:/opt/tinyos-main-2.1.2/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="SplitControl" loc="87:/opt/tinyos-main-2.1.2/tos/interfaces/SplitControl.nc">
      <documentation loc="72:/opt/tinyos-main-2.1.2/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0xb7667d58" loc="113:/opt/tinyos-main-2.1.2/tos/interfaces/SplitControl.nc">
        <documentation loc="106:/opt/tinyos-main-2.1.2/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0xb7667c00" loc="113:/opt/tinyos-main-2.1.2/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0xb7666ae0" loc="138:/opt/tinyos-main-2.1.2/tos/interfaces/SplitControl.nc">
        <documentation loc="132:/opt/tinyos-main-2.1.2/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0xb7666988" loc="138:/opt/tinyos-main-2.1.2/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb7667518" loc="104:/opt/tinyos-main-2.1.2/tos/interfaces/SplitControl.nc">
        <documentation loc="89:/opt/tinyos-main-2.1.2/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb76662a8" loc="130:/opt/tinyos-main-2.1.2/tos/interfaces/SplitControl.nc">
        <documentation loc="115:/opt/tinyos-main-2.1.2/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:/opt/tinyos-main-2.1.2/tos/interfaces/Boot.nc">
      <documentation loc="42:/opt/tinyos-main-2.1.2/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0xb777bae8" loc="60:/opt/tinyos-main-2.1.2/tos/interfaces/Boot.nc">
        <documentation loc="51:/opt/tinyos-main-2.1.2/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/opt/tinyos-main-2.1.2/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0xb7894888" loc="67:/opt/tinyos-main-2.1.2/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/opt/tinyos-main-2.1.2/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0xb7894da0" loc="75:/opt/tinyos-main-2.1.2/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/opt/tinyos-main-2.1.2/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="15:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
      <documentation loc="11:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="controlBusy" ref="0xb74a04a8" loc="38:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0xb74a0978" loc="44:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="40:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer0Asynchronous" ref="0xb74a0090" loc="32:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="29:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0xb74a0e38" loc="50:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="46:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0xb74a35a8" loc="21:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="17:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e4200"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0xb74e4428"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0xb74a3b98" loc="27:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="23:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e4200"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0xb74e4428"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0xb74a3a40" loc="27:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e4200"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0xb74e4428"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TossimPacket" loc="44:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacket.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="strength" ref="0xb7642168" loc="45:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacket.nc">
        <interfacedef-ref qname="TossimPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="signed char" size="I:1" alignment="I:1">
            <typename><typedef-ref name="int8_t" ref="0xb7f118f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7642010" loc="45:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
      <documentation loc="42:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0xb7668cd8" loc="65:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
        <documentation loc="58:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7668b80" loc="65:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0xb76596b8" loc="78:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
        <documentation loc="67:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7659560" loc="78:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0xb7658648" loc="126:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
        <documentation loc="109:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb76582e8" loc="126:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb76584c8" loc="126:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0xb765ace8" loc="106:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
        <documentation loc="96:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0xb765a350" loc="94:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
        <documentation loc="80:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb765a010" loc="94:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb765a1f0" loc="94:/opt/tinyos-main-2.1.2/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:/opt/tinyos-main-2.1.2/tos/lib/timer/LocalTime.nc">
      <documentation loc="36:/opt/tinyos-main-2.1.2/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb74ee3c8" loc="53:/opt/tinyos-main-2.1.2/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb74ee3c8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0xb74ee8a8" loc="61:/opt/tinyos-main-2.1.2/tos/lib/timer/LocalTime.nc">
        <documentation loc="55:/opt/tinyos-main-2.1.2/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb7669e78" loc="80:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
        <documentation loc="60:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
            </type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0xb7669918" loc="80:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0xb7669b30" loc="80:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb7669d10" loc="80:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0xb7662a88" loc="135:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
        <documentation loc="126:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7662728" loc="135:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb7662908" loc="135:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0xb76621c8" loc="123:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
        <documentation loc="113:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb7663b80" loc="96:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
        <documentation loc="82:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7663a28" loc="96:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb7661898" loc="110:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
        <documentation loc="98:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7661540" loc="110:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0xb7661738" loc="110:/opt/tinyos-main-2.1.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/opt/tinyos-main-2.1.2/tos/interfaces/Read.nc">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0xb7525270" loc="49:/opt/tinyos-main-2.1.2/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb7525270"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0xb7525720" loc="55:/opt/tinyos-main-2.1.2/tos/interfaces/Read.nc">
        <documentation loc="50:/opt/tinyos-main-2.1.2/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0xb7525ed0" loc="63:/opt/tinyos-main-2.1.2/tos/interfaces/Read.nc">
        <documentation loc="57:/opt/tinyos-main-2.1.2/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb7525270"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0xb7525ba0" loc="63:/opt/tinyos-main-2.1.2/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0xb7525d70" loc="63:/opt/tinyos-main-2.1.2/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0xb7525270"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:/opt/tinyos-main-2.1.2/tos/interfaces/Random.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0xb73784b8" loc="52:/opt/tinyos-main-2.1.2/tos/interfaces/Random.nc">
        <documentation loc="48:/opt/tinyos-main-2.1.2/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0xb7d00490"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0xb7378010" loc="46:/opt/tinyos-main-2.1.2/tos/interfaces/Random.nc">
        <documentation loc="42:/opt/tinyos-main-2.1.2/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="42:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0xb74aa368" loc="45:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="44:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e8e40"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0xb74e60c8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0xb74a9930" loc="53:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="52:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e00c8"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0xb74e02f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0xb74aae40" loc="49:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="48:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e3950"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0xb74e3b78"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0xb74a9480" loc="50:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e3950"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0xb74e3b78"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0xb74a9328" loc="50:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e3950"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0xb74e3b78"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0xb74a7010" loc="54:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e00c8"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0xb74e02f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0xb74a9de0" loc="54:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e00c8"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0xb74e02f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0xb74aa988" loc="46:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e8e40"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0xb74e60c8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0xb74aa830" loc="46:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e8e40"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0xb74e60c8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb7350028" loc="75:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
        <documentation loc="57:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7354cd0" loc="75:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb7354eb0" loc="75:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0xb734fb78" loc="125:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
        <documentation loc="115:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb734f818" loc="125:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb734f9f8" loc="125:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0xb734f2b8" loc="112:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
        <documentation loc="102:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb7350c68" loc="89:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
        <documentation loc="77:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7350b10" loc="89:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb734e920" loc="100:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
        <documentation loc="91:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb734e5c8" loc="100:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0xb734e7c0" loc="100:/opt/tinyos-main-2.1.2/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:/opt/tinyos-main-2.1.2/tos/interfaces/ParameterInit.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0xb737c5c0" loc="53:/opt/tinyos-main-2.1.2/tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0xb737c5c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0xb737cc10" loc="64:/opt/tinyos-main-2.1.2/tos/interfaces/ParameterInit.nc">
        <documentation loc="55:/opt/tinyos-main-2.1.2/tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0xb737c5c0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0xb737cab8" loc="64:/opt/tinyos-main-2.1.2/tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0xb737c5c0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:/opt/tinyos-main-2.1.2/tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0xb7546e90" loc="50:/opt/tinyos-main-2.1.2/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:/opt/tinyos-main-2.1.2/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0xb7543720" loc="60:/opt/tinyos-main-2.1.2/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:/opt/tinyos-main-2.1.2/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0xb7543320" loc="55:/opt/tinyos-main-2.1.2/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:/opt/tinyos-main-2.1.2/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0xb782d8a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0xb75469a0" loc="45:/opt/tinyos-main-2.1.2/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:/opt/tinyos-main-2.1.2/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb782d8a0"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0xb7546638" loc="45:/opt/tinyos-main-2.1.2/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb782d8a0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0xb7546840" loc="45:/opt/tinyos-main-2.1.2/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
      <documentation loc="36:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb74ce9d0" loc="56:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb74ce9d0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0xb74ceb38" loc="56:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74ceb38"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0xb74c8eb0" loc="109:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="105:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74ceb38"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0xb74caac8" loc="78:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="75:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0xb74c8868" loc="103:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="90:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74ceb38"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74ceb38"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0xb74c8518" loc="103:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74ceb38"/></type-var>
          </variable>
          <variable name="dt" ref="0xb74c8708" loc="103:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74ceb38"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0xb74c8010" loc="88:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="81:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0xb74c7368" loc="116:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="111:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74ceb38"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb74ca188" loc="66:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="59:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74ceb38"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0xb74ca030" loc="66:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74ceb38"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb74ca668" loc="73:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
        <documentation loc="68:/opt/tinyos-main-2.1.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:/opt/tinyos-main-2.1.2/tos/interfaces/Init.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0xb777a718" loc="62:/opt/tinyos-main-2.1.2/tos/interfaces/Init.nc">
        <documentation loc="53:/opt/tinyos-main-2.1.2/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0xb74a7de8" loc="41:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74a7de8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0xb74a5d20" loc="74:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0xb74a6cc8" loc="58:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb74a6300" loc="48:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74a7de8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0xb74a50f8" loc="62:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0xb74a41a8" loc="80:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb74a6888" loc="54:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74a7de8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0xb74a6730" loc="54:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74a7de8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb74a5500" loc="65:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb74a58f8" loc="68:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:/opt/tinyos-main-2.1.2/tos/interfaces/Receive.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0xb76609d0" loc="78:/opt/tinyos-main-2.1.2/tos/interfaces/Receive.nc">
        <documentation loc="58:/opt/tinyos-main-2.1.2/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
              <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb7660488" loc="78:/opt/tinyos-main-2.1.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0xb7660668" loc="78:/opt/tinyos-main-2.1.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb7660848" loc="78:/opt/tinyos-main-2.1.2/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SimMote" loc="42:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMote.nc">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMote.nc">
        <short>&#10; TOSSIM-specific interface to access a mote's state.</short>
        <long>&#10; TOSSIM-specific interface to access a mote's state. TinyOS programs&#10; should never use this interface.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="setEuid" ref="0xb76938d0" loc="44:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="euid" ref="0xb7693778" loc="44:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMote.nc">
            <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getVariableInfo" ref="0xb7691a38" loc="47:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="size_t" ref="0xb7f19488"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="name" ref="0xb7691500" loc="47:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMote.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="ptr" ref="0xb76916d8" loc="47:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMote.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb76918d0" loc="47:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMote.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="size_t" ref="0xb7f19488"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOff" ref="0xb76901a8" loc="49:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOn" ref="0xb7691dc8" loc="48:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getEuid" ref="0xb76933a0" loc="43:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0xb76910f8" loc="46:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartTime" ref="0xb7693d00" loc="45:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:/opt/tinyos-main-2.1.2/tos/lib/timer/Counter.nc">
      <documentation loc="36:/opt/tinyos-main-2.1.2/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb74cb8d0" loc="57:/opt/tinyos-main-2.1.2/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb74cb8d0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0xb74cba38" loc="57:/opt/tinyos-main-2.1.2/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74cba38"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0xb74cbf20" loc="64:/opt/tinyos-main-2.1.2/tos/lib/timer/Counter.nc">
        <documentation loc="59:/opt/tinyos-main-2.1.2/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0xb74cba38"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0xb74c3960" loc="76:/opt/tinyos-main-2.1.2/tos/lib/timer/Counter.nc">
        <documentation loc="73:/opt/tinyos-main-2.1.2/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0xb74c3460" loc="71:/opt/tinyos-main-2.1.2/tos/lib/timer/Counter.nc">
        <documentation loc="66:/opt/tinyos-main-2.1.2/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0xb74c3d60" loc="82:/opt/tinyos-main-2.1.2/tos/lib/timer/Counter.nc">
        <documentation loc="78:/opt/tinyos-main-2.1.2/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:/opt/tinyos-main-2.1.2/tos/interfaces/GeneralIO.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0xb7768038" loc="44:/opt/tinyos-main-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0xb7768420" loc="45:/opt/tinyos-main-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0xb776a898" loc="42:/opt/tinyos-main-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0xb7768bf0" loc="47:/opt/tinyos-main-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb776ac58" loc="43:/opt/tinyos-main-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0xb77687f8" loc="46:/opt/tinyos-main-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb776a158" loc="40:/opt/tinyos-main-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0xb776a4e8" loc="41:/opt/tinyos-main-2.1.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:/opt/tinyos-main-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0xb764b710" loc="59:/opt/tinyos-main-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:/opt/tinyos-main-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb764b5b8" loc="59:/opt/tinyos-main-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0xb764a220" loc="71:/opt/tinyos-main-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:/opt/tinyos-main-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb764a0c8" loc="71:/opt/tinyos-main-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0xb764aca8" loc="85:/opt/tinyos-main-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:/opt/tinyos-main-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb764ab50" loc="85:/opt/tinyos-main-2.1.2/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GainRadioModel" loc="47:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="putOnAirTo" ref="0xb75fa430" loc="48:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
            </type-int>
            <type-int cname="long long" size="I:8" alignment="I:8">
              <typename><typedef-ref name="sim_time_t" ref="0xb79ee748"/></typename>
            </type-int>
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0xb75fd890" loc="48:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="msg" ref="0xb75fdab8" loc="49:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0xb75fdc90" loc="50:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
            </type-int>
          </variable>
          <variable name="endTime" ref="0xb75fdec8" loc="51:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
            <type-int cname="long long" size="I:8" alignment="I:8">
              <typename><typedef-ref name="sim_time_t" ref="0xb79ee748"/></typename>
            </type-int>
          </variable>
          <variable name="gain" ref="0xb75fa0b8" loc="52:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </variable>
          <variable name="reverseGain" ref="0xb75fa2b0" loc="53:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receive" ref="0xb75f9c18" loc="60:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb75f9ac0" loc="60:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearChannel" ref="0xb75fad48" loc="56:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPendingTransmission" ref="0xb75f91a8" loc="57:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClearValue" ref="0xb75fa948" loc="55:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0xb75fa7f0" loc="55:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="acked" ref="0xb75f96d8" loc="59:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb75f9580" loc="59:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="shouldAck" ref="0xb75f71c0" loc="61:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb75f7068" loc="61:/opt/tinyos-main-2.1.2/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TossimPacketModel" loc="45:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0xb7640278" loc="57:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="47:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="node" ref="0xb7642cc0" loc="57:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="msg" ref="0xb7642ed8" loc="57:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0xb7640110" loc="57:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receive" ref="0xb763e9d0" loc="85:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="79:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
          <short>&#10; Signal that a packet was received.</short>
          <long>&#10; Signal that a packet was received. Note that there is no buffer&#10; swap: a component using this interface must copy out the message&#10; if it needs it.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb763e878" loc="85:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0xb7640a18" loc="69:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="59:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb76408c0" loc="69:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0xb763e388" loc="76:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="71:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb763e030" loc="76:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0xb763e228" loc="76:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="shouldAck" ref="0xb763d058" loc="87:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0xb763eec0" loc="87:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0xb74b23e8" loc="55:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb74b23e8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0xb74afba0" loc="98:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0xb74af310" loc="87:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0xb74b28d8" loc="61:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb74b23e8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0xb74ae168" loc="104:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0xb74ae010" loc="104:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0xb74ae5f8" loc="110:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0xb74b06c8" loc="75:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0xb74b02a8" loc="70:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0xb74af778" loc="93:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0xb74b2e50" loc="67:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb74b23e8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0xb74b2cf8" loc="67:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0xb74b23e8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0xb74b0ad0" loc="78:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb74b0ec8" loc="81:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
      <documentation loc="42:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0xb764f9e8" loc="177:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="164:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0xb782d8a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb764f890" loc="177:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0xb7654168" loc="88:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="80:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb7654010" loc="88:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0xb7656010" loc="68:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="63:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0xb76566a8" loc="78:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="70:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb7656550" loc="78:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0xb7653bd8" loc="121:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="105:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb7653870" loc="121:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb7653a78" loc="121:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0xb7654d50" loc="103:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="90:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb76549e8" loc="103:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0xb7654bf0" loc="103:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0xb7652310" loc="147:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0xb782d648"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb76521b8" loc="147:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0xb7652e48" loc="162:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="149:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb782d648"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb7652b18" loc="162:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0xb7652ce8" loc="162:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0xb782d648"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0xb76507c0" loc="136:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="123:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb7650668" loc="136:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0xb764e688" loc="187:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="179:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb782d8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0xb764e328" loc="187:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
                <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0xb764e528" loc="187:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0xb782d8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0xb764ef00" loc="195:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
        <documentation loc="189:/opt/tinyos-main-2.1.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0xb782d8a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/opt/tinyos-main-2.1.2/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/opt/tinyos-main-2.1.2/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0xb7b2f010" loc="57:/opt/tinyos-main-2.1.2/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/opt/tinyos-main-2.1.2/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0xb7b2f918" loc="72:/opt/tinyos-main-2.1.2/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/opt/tinyos-main-2.1.2/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0xb7b2f450" loc="65:/opt/tinyos-main-2.1.2/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/opt/tinyos-main-2.1.2/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
      <documentation loc="36:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0xb7536dd8" loc="53:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0xb7536dd8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0xb7530550" loc="136:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="132:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0xb75323d8" loc="83:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="80:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0xb7531530" loc="114:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="100:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0xb75311e8" loc="114:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0xb75313d0" loc="114:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0xb7532d28" loc="98:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="94:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0xb7530ec8" loc="151:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="146:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0xb7530998" loc="144:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="138:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0xb7532868" loc="92:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="86:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0xb7533450" loc="64:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="56:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0xb75332f8" loc="64:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0xb7531f18" loc="129:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="116:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0xb7531bd0" loc="129:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0xb7531db8" loc="129:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0xb7533ae8" loc="73:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="66:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0xb7533990" loc="73:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb7532010" loc="78:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
        <documentation loc="75:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
    <attribute name="bnd" loc="9:/usr/lib/ncc/deputy_nodeputy.h" ref="0xb7f15118" defined="" size="I:8" alignment="I:4">
      <field name="lo" ref="0xb7f15378" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="hi" ref="0xb7f153d8" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
    </attribute>
    <union loc="224:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7ba7d28" defined="" size="I:8" alignment="I:4">
      <field name="__size" ref="0xb7ba7e38" bit-offset="I:0" size="I:8">
        <type-array elements="I:8" size="I:8" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0xb7ba7e98" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <enum loc="90:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74e96b0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="itimerspec" loc="161:/usr/include/time.h" ref="0xb78bd3d8" defined="" size="I:16" alignment="I:4">
      <field name="it_interval" ref="0xb78bd810" bit-offset="I:0" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="timespec" ref="0xb7bba308"/></type-tag>
      </field>
      <field name="it_value" ref="0xb78bd870" bit-offset="I:64" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="timespec" ref="0xb7bba308"/></type-tag>
      </field>
    </struct>
    <nx_struct name="tossim_metadata" loc="18:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimRadioMsg.h" ref="0xb782b8a0" defined="" size="I:4" alignment="I:1">
      <field name="strength" ref="0xb782a270" bit-offset="I:0" size="I:1">
        <type-int cname="signed char" size="I:1" alignment="I:1" network="nx_int8_t">
          <typename><typedef-ref name="nx_int8_t" ref="0xb7c1a5a0"/></typename>
        </type-int>
      </field>
      <field name="ack" ref="0xb782a2d0" bit-offset="I:8" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0xb7c19728"/></typename>
        </type-int>
      </field>
      <field name="time" ref="0xb782a330" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0xb7c19ba0"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <struct name="gain_entry" loc="53:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_gain.h" ref="0xb7904d60" defined="" size="I:16" alignment="I:4">
      <field name="mote" ref="0xb7903288" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="gain" ref="0xb79032e8" bit-offset="I:32" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="next" ref="0xb7903348" bit-offset="I:96" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:16" alignment="I:4"><struct-ref name="gain_entry" ref="0xb7904d60"/></type-tag>
        </type-pointer>
      </field>
    </struct>
    <struct name="sim_gain_noise" loc="3:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_gain.c" ref="0xb78fc148" defined="" size="I:16" alignment="I:4">
      <field name="mean" ref="0xb78fc4b8" bit-offset="I:0" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="range" ref="0xb78fc518" bit-offset="I:64" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
    </struct>
    <attribute name="deputy_scope"  loc="NONE" ref="0xb7f1ac28" size="V:" alignment="V:">
    </attribute>
    <struct name="timeval" loc="30:/usr/include/i386-linux-gnu/bits/time.h" ref="0xb7bba8e0" defined="" size="I:8" alignment="I:4">
      <field name="tv_sec" ref="0xb7bbaca8" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__time_t" ref="0xb7be0a28"/></typename>
        </type-int>
      </field>
      <field name="tv_usec" ref="0xb7bbad08" bit-offset="I:32" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__suseconds_t" ref="0xb7be0f00"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="47:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_log.c" ref="0xb79d1678" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="nonnull" loc="8:/usr/lib/ncc/deputy_nodeputy.h" ref="0xb7f19b38" defined="" size="I:4" alignment="I:4">
      <field name="dummy" ref="0xb7f19d90" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <attribute name="number"  loc="NONE" ref="0xb7f1ccf0" size="V:" alignment="V:">
    </attribute>
    <struct loc="27:/usr/include/i386-linux-gnu/bits/sigset.h" ref="0xb7bbbc78" defined="" size="I:128" alignment="I:4">
      <field name="__val" ref="0xb7bbbd88" bit-offset="I:0" size="I:128">
        <type-array elements="I:32" size="I:128" alignment="I:4">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
        </type-array>
      </field>
    </struct>
    <enum loc="52:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74f08d0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="node" loc="62:/opt/tinyos-main-2.1.2/tos/lib/tossim/heap.c" ref="0xb7992cb0" defined="" size="I:12" alignment="I:4">
      <field name="data" ref="0xb7991050" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="key" ref="0xb79910b0" bit-offset="I:32" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <struct loc="123:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74e5da8" defined="" size="I:1" alignment="I:1">
      <field name="tcr0ub" ref="0xb74e5eb8" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocr0ub" ref="0xb74e5f18" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="tcn0ub" ref="0xb74e5f78" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="as0" ref="0xb74e4010" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0xb74e4070" bit-offset="I:4" bit-size="I:4">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="211:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74dd948" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <nx_struct name="serial_packet" loc="131:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h" ref="0xb7825968" defined="" size="I:7" alignment="I:1">
      <field name="header" ref="0xb7825df0" bit-offset="I:0" size="I:7">
        <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0xb7826ce8"/>
          <typename><typedef-ref name="serial_header_t" ref="0xb7825760"/></typename>
        </type-tag>
      </field>
      <field name="data" ref="0xb7825e50" bit-offset="I:56" size="I:0">
        <type-array elements="I:0" size="I:0" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0xb7c19728"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <enum loc="185:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74df778" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="112:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7bad5c0" defined="" size="I:4" alignment="I:4">
      <field name="__elision_data" ref="0xb7bad6d0" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:2"><struct-ref ref="0xb7bad1b0"/></type-tag>
      </field>
      <field name="__list" ref="0xb7bad730" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><struct-ref name="__pthread_internal_slist" ref="0xb7bae1c0"/>
          <typename><typedef-ref name="__pthread_slist_t" ref="0xb7bae670"/></typename>
        </type-tag>
      </field>
    </union>
    <attribute name="integer"  loc="NONE" ref="0xb7f1cb88" size="V:" alignment="V:">
    </attribute>
    <attribute name="exactlyonce" loc="99:/opt/tinyos-main-2.1.2/tos/lib/tossim/tos.h" ref="0xb79d8990" defined="" size="I:0" alignment="I:1">
    </attribute>
    <union name="message_footer" loc="55:/opt/tinyos-main-2.1.2/tos/lib/tossim/platform_message.h" ref="0xb7822010" defined="" size="I:2" alignment="I:1">
      <field name="tossim" ref="0xb7822350" bit-offset="I:0" size="I:2">
        <type-tag size="I:2" alignment="I:1"><nx_struct-ref name="tossim_footer" ref="0xb782b2d0"/>
          <typename><typedef-ref name="tossim_footer_t" ref="0xb782b688"/></typename>
        </type-tag>
      </field>
    </union>
    <union loc="98:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74e8e40" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0xb74e8f50" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0xb74e6010" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb74e89d0"/></type-tag>
      </field>
    </union>
    <union loc="120:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74e4200" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0xb74e4310" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0xb74e4370" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb74e5da8"/></type-tag>
      </field>
    </union>
    <union name="message_metadata" loc="59:/opt/tinyos-main-2.1.2/tos/lib/tossim/platform_message.h" ref="0xb7822630" defined="" size="I:4" alignment="I:1">
      <field name="tossim" ref="0xb7822998" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:1"><nx_struct-ref name="tossim_metadata" ref="0xb782b8a0"/>
          <typename><typedef-ref name="tossim_metadata_t" ref="0xb782a3e8"/></typename>
        </type-tag>
      </field>
    </union>
    <attribute name="combine"  loc="NONE" ref="0xb7f1a890" size="V:" alignment="V:">
      <field name="fn" ref="0xb7f1a9a0" bit-offset="U:" bit-size="U:">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
    </attribute>
    <struct name="drand48_data" loc="412:/usr/include/stdlib.h" ref="0xb7b95210" defined="" size="I:24" alignment="I:4">
      <field name="__x" ref="0xb7b959e8" bit-offset="I:0" size="I:6">
        <type-array elements="I:3" size="I:6" alignment="I:2">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
        </type-array>
      </field>
      <field name="__old_x" ref="0xb7b95a48" bit-offset="I:48" size="I:6">
        <type-array elements="I:3" size="I:6" alignment="I:2">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
        </type-array>
      </field>
      <field name="__c" ref="0xb7b95aa8" bit-offset="I:96" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="__init" ref="0xb7b95b08" bit-offset="I:112" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="__a" ref="0xb7b95b68" bit-offset="I:128" size="I:8">
        <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <struct name="__locale_struct" loc="27:/usr/include/xlocale.h" ref="0xb7c06838" defined="" size="I:116" alignment="I:4">
      <field name="__locales" ref="0xb7c053f8" bit-offset="I:0" size="I:52">
        <type-array elements="I:13" size="I:52" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="V:" alignment="V:"><struct-ref name="__locale_data" ref="0xb7c069d0"/></type-tag>
          </type-pointer>
        </type-array>
      </field>
      <field name="__ctype_b" ref="0xb7c05458" bit-offset="I:416" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-qualified const="">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="__ctype_tolower" ref="0xb7c054b8" bit-offset="I:448" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-qualified const="">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="__ctype_toupper" ref="0xb7c05518" bit-offset="I:480" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-qualified const="">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="__names" ref="0xb7c05578" bit-offset="I:512" size="I:52">
        <type-array elements="I:13" size="I:52" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-qualified const="">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-qualified>
          </type-pointer>
        </type-array>
      </field>
    </struct>
    <nx_struct name="serial_header" loc="123:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h" ref="0xb7826ce8" defined="" size="I:7" alignment="I:1">
      <field name="dest" ref="0xb7825528" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0xb782d410"/></typename>
        </type-int>
      </field>
      <field name="src" ref="0xb7825588" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0xb782d410"/></typename>
        </type-int>
      </field>
      <field name="length" ref="0xb78255e8" bit-offset="I:32" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0xb7c19728"/></typename>
        </type-int>
      </field>
      <field name="group" ref="0xb7825648" bit-offset="I:40" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_group_t" ref="0xb782d178"/></typename>
        </type-int>
      </field>
      <field name="type" ref="0xb78256a8" bit-offset="I:48" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_id_t" ref="0xb782fdc0"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum loc="132:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h" ref="0xb777fd60" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union name="message_header" loc="50:/opt/tinyos-main-2.1.2/tos/lib/tossim/platform_message.h" ref="0xb78247e8" defined="" size="I:7" alignment="I:1">
      <field name="tossim" ref="0xb7824ca0" bit-offset="I:0" size="I:7">
        <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="tossim_header" ref="0xb782c638"/>
          <typename><typedef-ref name="tossim_header_t" ref="0xb782b0c8"/></typename>
        </type-tag>
      </field>
      <field name="serial" ref="0xb7824d00" bit-offset="I:0" size="I:7">
        <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0xb7826ce8"/>
          <typename><typedef-ref name="serial_header_t" ref="0xb7825760"/></typename>
        </type-tag>
      </field>
    </union>
    <struct name="timespec" loc="120:/usr/include/time.h" ref="0xb7bba308" defined="" size="I:8" alignment="I:4">
      <field name="tv_sec" ref="0xb7bba6f8" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__time_t" ref="0xb7be0a28"/></typename>
        </type-int>
      </field>
      <field name="tv_nsec" ref="0xb7bba758" bit-offset="I:32" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__syscall_slong_t" ref="0xb7bdc1e0"/></typename>
        </type-int>
      </field>
    </struct>
    <attribute name="count" loc="11:/usr/lib/ncc/deputy_nodeputy.h" ref="0xb7f15da8" defined="" size="I:4" alignment="I:4">
      <field name="n" ref="0xb7f15f58" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <enum loc="51:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h" ref="0xb794e870" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="58:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h" ref="0xb7786618" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="26:/usr/include/_G_config.h" ref="0xb7a4b490" defined="" size="I:16" alignment="I:4">
      <field name="__pos" ref="0xb7a4b5a0" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__off64_t" ref="0xb7be1740"/></typename>
        </type-int>
      </field>
      <field name="__state" ref="0xb7a4b600" bit-offset="I:64" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0xb7a4c688"/>
          <typename><typedef-ref name="__mbstate_t" ref="0xb7a4c8b0"/></typename>
        </type-tag>
      </field>
    </struct>
    <attribute name="bnd_nok" loc="10:/usr/lib/ncc/deputy_nodeputy.h" ref="0xb7f15768" defined="" size="I:8" alignment="I:4">
      <field name="lo" ref="0xb7f159c8" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="hi" ref="0xb7f15a28" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
    </attribute>
    <struct loc="280:/usr/include/inttypes.h" ref="0xb7cf93b0" defined="" size="I:16" alignment="I:4">
      <field name="quot" ref="0xb7cf94c0" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="rem" ref="0xb7cf9520" bit-offset="I:64" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <struct name="timezone" loc="55:/usr/include/i386-linux-gnu/sys/time.h" ref="0xb7958bb0" defined="" size="I:8" alignment="I:4">
      <field name="tz_minuteswest" ref="0xb7958f08" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tz_dsttime" ref="0xb7958f68" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct loc="42:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.h" ref="0xb753a2c0" defined="" size="I:4" alignment="I:4">
      <field name="notUsed" ref="0xb753a3d0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <union name="wait" loc="66:/usr/include/i386-linux-gnu/bits/waitstatus.h" ref="0xb7bd8e48" defined="" size="I:4" alignment="I:4">
      <field name="w_status" ref="0xb7bd6328" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__wait_terminated" ref="0xb7bd6388" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><struct-ref ref="0xb7bd7730"/></type-tag>
      </field>
      <field name="__wait_stopped" ref="0xb7bd63e8" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><struct-ref ref="0xb7bd6010"/></type-tag>
      </field>
    </union>
    <struct loc="117:/usr/include/stdlib.h" ref="0xb7bd4af8" defined="" size="I:16" alignment="I:4">
      <field name="quot" ref="0xb7bd4c08" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="rem" ref="0xb7bd4c68" bit-offset="I:64" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <enum loc="82:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74eac98" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="136:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74e3400" defined="" size="I:1" alignment="I:1">
      <field name="toie0" ref="0xb74e3510" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocie0" ref="0xb74e3570" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="toie1" ref="0xb74e35d0" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocie1b" ref="0xb74e3630" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocie1a" ref="0xb74e3690" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ticie1" ref="0xb74e36f0" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="toie2" ref="0xb74e3750" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocie2" ref="0xb74e37b0" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
    </struct>
    <struct name="sim_event" loc="53:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_event_queue.h" ref="0xb79e85b8" defined="" size="I:28" alignment="I:4">
      <field name="time" ref="0xb79e6868" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="sim_time_t" ref="0xb79ee748"/></typename>
        </type-int>
      </field>
      <field name="mote" ref="0xb79e68c8" bit-offset="I:64" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="force" ref="0xb79e6928" bit-offset="I:96" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
        </type-int>
      </field>
      <field name="cancelled" ref="0xb79e6988" bit-offset="I:104" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
        </type-int>
      </field>
      <field name="data" ref="0xb79e69e8" bit-offset="I:128" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="handle" ref="0xb79e6a48" bit-offset="I:160" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0xb79e85b8"/>
                  <typename><typedef-ref name="sim_event_t" ref="0xb79e8820"/></typename>
                </type-tag>
              </type-pointer>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="cleanup" ref="0xb79e6ab8" bit-offset="I:192" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0xb79e85b8"/>
                  <typename><typedef-ref name="sim_event_t" ref="0xb79e8820"/></typename>
                </type-tag>
              </type-pointer>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
    </struct>
    <enum loc="347:/usr/include/math.h" ref="0xb7a6d838" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="_IO_jump_t" ref="0xb7a4bc08" size="V:" alignment="V:">
    </struct>
    <union loc="312:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74cfb10" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0xb74cfc20" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0xb74cfc80" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb74cf620"/></type-tag>
      </field>
    </union>
    <struct loc="97:/usr/include/stdlib.h" ref="0xb7bd6eb8" defined="" size="I:8" alignment="I:4">
      <field name="quot" ref="0xb7bd4010" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="rem" ref="0xb7bd4070" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct loc="141:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7bab518" defined="" size="I:44" alignment="I:4">
      <field name="__lock" ref="0xb7bab628" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__futex" ref="0xb7bab688" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__total_seq" ref="0xb7bab6e8" bit-offset="I:64" size="I:8">
        <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="__wakeup_seq" ref="0xb7bab748" bit-offset="I:128" size="I:8">
        <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="__woken_seq" ref="0xb7bab7a8" bit-offset="I:192" size="I:8">
        <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="__mutex" ref="0xb7bab808" bit-offset="I:256" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__nwaiters" ref="0xb7bab868" bit-offset="I:288" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__broadcast_seq" ref="0xb7bab8c8" bit-offset="I:320" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <enum name="__codecvt_result" loc="176:/usr/include/libio.h" ref="0xb7a49850" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="sim_packet" loc="59:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_packet.h" ref="0xb78377a8" defined="" size="I:0" alignment="I:1">
    </struct>
    <nx_struct name="tossim_footer" loc="14:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimRadioMsg.h" ref="0xb782b2d0" defined="" size="I:2" alignment="I:1">
      <field name="crc" ref="0xb782b5d0" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nxle_uint16_t">
          <typename><typedef-ref name="nxle_uint16_t" ref="0xb7c14018"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <struct loc="43:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.h" ref="0xb753a700" defined="" size="I:4" alignment="I:4">
      <field name="notUsed" ref="0xb753a810" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <union loc="150:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74e00c8" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0xb74e01d8" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0xb74e0238" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb74e1b28"/></type-tag>
      </field>
    </union>
    <union loc="167:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74df3f0" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0xb74df500" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0xb74df560" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb74e0f38"/></type-tag>
      </field>
    </union>
    <struct loc="196:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74deaf0" defined="" size="I:1" alignment="I:1">
      <field name="wgm10" ref="0xb74dec00" bit-offset="I:0" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="comC" ref="0xb74dec60" bit-offset="I:2" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="comB" ref="0xb74decc0" bit-offset="I:4" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="comA" ref="0xb74ded20" bit-offset="I:6" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="87:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h" ref="0xb782a838" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="133:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74e3950" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0xb74e3a60" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0xb74e3ac0" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb74e3400"/></type-tag>
      </field>
    </union>
    <union loc="250:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74d7630" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0xb74d7740" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0xb74d77a0" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb74d7210"/></type-tag>
      </field>
    </union>
    <struct name="__pthread_internal_slist" loc="81:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7bae1c0" defined="" size="I:4" alignment="I:4">
      <field name="__next" ref="0xb7bae5b8" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:4" alignment="I:4"><struct-ref name="__pthread_internal_slist" ref="0xb7bae1c0"/></type-tag>
        </type-pointer>
      </field>
    </struct>
    <enum loc="14:/opt/tinyos-main-2.1.2/tos/types/AM.h" ref="0xb782dc40" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="41:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.h" ref="0xb753be50" defined="" size="I:4" alignment="I:4">
      <field name="notUsed" ref="0xb753bf60" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <nx_struct name="serial_metadata" loc="136:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h" ref="0xb7824228" defined="" size="I:1" alignment="I:1">
      <field name="ack" ref="0xb7824520" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0xb7c19728"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum name="__itimer_which" loc="91:/usr/include/i386-linux-gnu/sys/time.h" ref="0xb7954348" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="atmostonce" loc="97:/opt/tinyos-main-2.1.2/tos/lib/tossim/tos.h" ref="0xb79d8590" defined="" size="I:0" alignment="I:1">
    </attribute>
    <struct loc="44:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.h" ref="0xb753ab40" defined="" size="I:4" alignment="I:4">
      <field name="notUsed" ref="0xb753ac50" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct loc="101:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74e89d0" defined="" size="I:1" alignment="I:1">
      <field name="cs" ref="0xb74e8ae0" bit-offset="I:0" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="wgm1" ref="0xb74e8b40" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="com" ref="0xb74e8ba0" bit-offset="I:4" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="wgm0" ref="0xb74e8c00" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="foc" ref="0xb74e8c60" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="120:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h" ref="0xb777f140" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="67:/usr/include/stdlib.h" ref="0xb7bd6800" defined="" size="I:4" alignment="I:4">
      <field name="__uptr" ref="0xb7bd6910" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:4" alignment="I:4"><union-ref name="wait" ref="0xb7bd8e48"/></type-tag>
        </type-pointer>
      </field>
      <field name="__iptr" ref="0xb7bd6970" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </type-pointer>
      </field>
    </union>
    <attribute name="hwevent"  loc="NONE" ref="0xb7f1a448" size="V:" alignment="V:">
    </attribute>
    <enum loc="63:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_log.c" ref="0xb79d0b50" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="84:/usr/include/i386-linux-gnu/bits/waitstatus.h" ref="0xb7bd6010" defined="" size="I:4" alignment="I:4">
      <field name="__w_stopval" ref="0xb7bd6120" bit-offset="I:0" bit-size="I:8">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__w_stopsig" ref="0xb7bd6180" bit-offset="I:8" bit-size="I:8">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <union name="pthread_attr_t" loc="63:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7bb08a8" defined="" size="I:36" alignment="I:4">
      <field name="__size" ref="0xb7bb0c48" bit-offset="I:0" size="I:36">
        <type-array elements="I:36" size="I:36" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0xb7bb0ca8" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <struct name="_IO_FILE" loc="241:/usr/include/libio.h" ref="0xb7a4f770" defined="" size="I:148" alignment="I:4">
      <field name="_flags" ref="0xb7a46b60" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_IO_read_ptr" ref="0xb7a46bc0" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_read_end" ref="0xb7a46c20" bit-offset="I:64" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_read_base" ref="0xb7a46c80" bit-offset="I:96" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_write_base" ref="0xb7a46ce0" bit-offset="I:128" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_write_ptr" ref="0xb7a46d40" bit-offset="I:160" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_write_end" ref="0xb7a46da0" bit-offset="I:192" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_buf_base" ref="0xb7a46e00" bit-offset="I:224" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_buf_end" ref="0xb7a46e60" bit-offset="I:256" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_save_base" ref="0xb7a46ec0" bit-offset="I:288" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_backup_base" ref="0xb7a46f20" bit-offset="I:320" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_save_end" ref="0xb7a46f80" bit-offset="I:352" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_markers" ref="0xb7a44010" bit-offset="I:384" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:12" alignment="I:4"><struct-ref name="_IO_marker" ref="0xb7a490c8"/></type-tag>
        </type-pointer>
      </field>
      <field name="_chain" ref="0xb7a440f0" bit-offset="I:416" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0xb7a4f770"/></type-tag>
        </type-pointer>
      </field>
      <field name="_fileno" ref="0xb7a44150" bit-offset="I:448" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_flags2" ref="0xb7a441b0" bit-offset="I:480" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_old_offset" ref="0xb7a44210" bit-offset="I:512" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__off_t" ref="0xb7be14c0"/></typename>
        </type-int>
      </field>
      <field name="_cur_column" ref="0xb7a44270" bit-offset="I:544" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="_vtable_offset" ref="0xb7a442d0" bit-offset="I:560" size="I:1">
        <type-int cname="signed char" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="_shortbuf" ref="0xb7a44330" bit-offset="I:568" size="I:1">
        <type-array elements="I:1" size="I:1" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="_lock" ref="0xb7a44390" bit-offset="I:576" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1">
            <typename><typedef-ref name="_IO_lock_t" ref="0xb7a4beb0"/></typename>
          </type-void>
        </type-pointer>
      </field>
      <field name="_offset" ref="0xb7a443f0" bit-offset="I:608" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__off64_t" ref="0xb7be1740"/></typename>
        </type-int>
      </field>
      <field name="__pad1" ref="0xb7a44450" bit-offset="I:672" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__pad2" ref="0xb7a444b0" bit-offset="I:704" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__pad3" ref="0xb7a44510" bit-offset="I:736" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__pad4" ref="0xb7a44670" bit-offset="I:768" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__pad5" ref="0xb7a446d0" bit-offset="I:800" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="size_t" ref="0xb7f19488"/></typename>
        </type-int>
      </field>
      <field name="_mode" ref="0xb7a44730" bit-offset="I:832" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_unused2" ref="0xb7a44790" bit-offset="I:864" size="I:40">
        <type-array elements="I:40" size="I:40" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
    </struct>
    <struct name="hashtable" ref="0xb79d8c90" size="V:" alignment="V:">
    </struct>
    <struct name="heap" loc="61:/opt/tinyos-main-2.1.2/tos/lib/tossim/heap.h" ref="0xb7996570" defined="" size="I:12" alignment="I:4">
      <field name="size" ref="0xb79969b0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="data" ref="0xb7996a10" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="private_size" ref="0xb7996a70" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <enum loc="94:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h" ref="0xb782adf0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="safe"  loc="NONE" ref="0xb7f1ad90" size="V:" alignment="V:">
    </attribute>
    <enum loc="63:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74ece88" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="90:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7badef8" defined="" size="I:24" alignment="I:4">
      <field name="__data" ref="0xb7bac050" bit-offset="I:0" size="I:24">
        <type-tag size="I:24" alignment="I:4"><struct-ref name="__pthread_mutex_s" ref="0xb7bae8e0"/></type-tag>
      </field>
      <field name="__size" ref="0xb7bac0b0" bit-offset="I:0" size="I:24">
        <type-array elements="I:24" size="I:24" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0xb7bac110" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <struct name="_IO_marker" loc="156:/usr/include/libio.h" ref="0xb7a490c8" defined="" size="I:12" alignment="I:4">
      <field name="_next" ref="0xb7a495e8" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:12" alignment="I:4"><struct-ref name="_IO_marker" ref="0xb7a490c8"/></type-tag>
        </type-pointer>
      </field>
      <field name="_sbuf" ref="0xb7a49648" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0xb7a4f770"/></type-tag>
        </type-pointer>
      </field>
      <field name="_pos" ref="0xb7a496a8" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct loc="300:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74d00f0" defined="" size="I:1" alignment="I:1">
      <field name="ocie1c" ref="0xb74d0200" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocie3c" ref="0xb74d0260" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="toie3" ref="0xb74d02c0" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocie3b" ref="0xb74d0320" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocie3a" ref="0xb74d0380" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ticie3" ref="0xb74d03e0" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0xb74d0440" bit-offset="I:6" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
    </struct>
    <struct name="random_data" loc="343:/usr/include/stdlib.h" ref="0xb7ba1288" defined="" size="I:28" alignment="I:4">
      <field name="fptr" ref="0xb7ba1b98" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="int" size="I:4" alignment="I:4">
            <typename><typedef-ref name="int32_t" ref="0xb7f11d78"/></typename>
          </type-int>
        </type-pointer>
      </field>
      <field name="rptr" ref="0xb7ba1bf8" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="int" size="I:4" alignment="I:4">
            <typename><typedef-ref name="int32_t" ref="0xb7f11d78"/></typename>
          </type-int>
        </type-pointer>
      </field>
      <field name="state" ref="0xb7ba1c58" bit-offset="I:64" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="int" size="I:4" alignment="I:4">
            <typename><typedef-ref name="int32_t" ref="0xb7f11d78"/></typename>
          </type-int>
        </type-pointer>
      </field>
      <field name="rand_type" ref="0xb7ba1cb8" bit-offset="I:96" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="rand_deg" ref="0xb7ba1d18" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="rand_sep" ref="0xb7ba1d78" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="end_ptr" ref="0xb7ba1dd8" bit-offset="I:192" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="int" size="I:4" alignment="I:4">
            <typename><typedef-ref name="int32_t" ref="0xb7f11d78"/></typename>
          </type-int>
        </type-pointer>
      </field>
    </struct>
    <union loc="85:/usr/include/wchar.h" ref="0xb7a4c398" defined="" size="I:4" alignment="I:4">
      <field name="__wch" ref="0xb7a4c4a8" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__wchb" ref="0xb7a4c508" bit-offset="I:0" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
    </union>
    <struct name="tm" loc="133:/usr/include/time.h" ref="0xb78be2a8" defined="" size="I:44" alignment="I:4">
      <field name="tm_sec" ref="0xb78bee30" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_min" ref="0xb78bee90" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_hour" ref="0xb78beef0" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_mday" ref="0xb78bef50" bit-offset="I:96" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_mon" ref="0xb78bd010" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_year" ref="0xb78bd070" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_wday" ref="0xb78bd0d0" bit-offset="I:192" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_yday" ref="0xb78bd130" bit-offset="I:224" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_isdst" ref="0xb78bd190" bit-offset="I:256" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_gmtoff" ref="0xb78bd1f0" bit-offset="I:288" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_zone" ref="0xb78bd250" bit-offset="I:320" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-qualified const="">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
    </struct>
    <struct loc="234:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74d9ae8" defined="" size="I:1" alignment="I:1">
      <field name="cs" ref="0xb74d9bf8" bit-offset="I:0" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="wgm32" ref="0xb74d9c58" bit-offset="I:3" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0xb74d9cb8" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ices1" ref="0xb74d9d18" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="icnc1" ref="0xb74d9d78" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
    </struct>
    <struct name="sim_log_output" loc="51:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_log.c" ref="0xb79d1ab8" defined="" size="I:8" alignment="I:4">
      <field name="num" ref="0xb79d1e88" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="files" ref="0xb79d1ee8" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0xb7a4f770"/>
              <typename><typedef-ref name="FILE" ref="0xb7a4f9b0"/></typename>
            </type-tag>
          </type-pointer>
        </type-pointer>
      </field>
    </struct>
    <struct loc="64:/usr/include/i386-linux-gnu/sys/select.h" ref="0xb7bb8890" defined="" size="I:128" alignment="I:4">
      <field name="__fds_bits" ref="0xb7bb89a0" bit-offset="I:0" size="I:128">
        <type-array elements="I:32" size="I:128" alignment="I:4">
          <type-int cname="long" size="I:4" alignment="I:4">
            <typename><typedef-ref name="__fd_mask" ref="0xb7bb8170"/></typename>
          </type-int>
        </type-array>
      </field>
    </struct>
    <struct name="radio_stats" loc="109:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h" ref="0xb78274f8" defined="" size="I:18" alignment="I:2">
      <field name="version" ref="0xb7826668" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="flags" ref="0xb78266c8" bit-offset="I:8" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="reserved" ref="0xb7826728" bit-offset="I:16" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="platform" ref="0xb7826788" bit-offset="I:24" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="MTU" ref="0xb78267e8" bit-offset="I:32" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0xb7d00490"/></typename>
        </type-int>
      </field>
      <field name="radio_crc_fail" ref="0xb7826848" bit-offset="I:48" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0xb7d00490"/></typename>
        </type-int>
      </field>
      <field name="radio_queue_drops" ref="0xb78268a8" bit-offset="I:64" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0xb7d00490"/></typename>
        </type-int>
      </field>
      <field name="serial_crc_fail" ref="0xb7826908" bit-offset="I:80" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0xb7d00490"/></typename>
        </type-int>
      </field>
      <field name="serial_tx_fail" ref="0xb7826968" bit-offset="I:96" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0xb7d00490"/></typename>
        </type-int>
      </field>
      <field name="serial_short_packets" ref="0xb78269c8" bit-offset="I:112" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0xb7d00490"/></typename>
        </type-int>
      </field>
      <field name="serial_proto_drops" ref="0xb7826a28" bit-offset="I:128" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0xb7d00490"/></typename>
        </type-int>
      </field>
    </struct>
    <attribute name="one_nok" loc="14:/usr/lib/ncc/deputy_nodeputy.h" ref="0xb7f13da8" defined="" size="I:4" alignment="I:4">
      <field name="dummy" ref="0xb7f13f80" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <attribute name="dmemset" loc="15:/usr/lib/ncc/deputy_nodeputy.h" ref="0xb7f12340" defined="" size="I:12" alignment="I:4">
      <field name="a1" ref="0xb7f125c8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="a2" ref="0xb7f12628" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="a3" ref="0xb7f12688" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <attribute name="atleastonce" loc="98:/opt/tinyos-main-2.1.2/tos/lib/tossim/tos.h" ref="0xb79d8790" defined="" size="I:0" alignment="I:1">
    </attribute>
    <struct loc="94:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h" ref="0xb77817b0" defined="" size="I:1" alignment="I:1">
      <field name="mux" ref="0xb77818c0" bit-offset="I:0" bit-size="I:5">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="adlar" ref="0xb7781920" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="refs" ref="0xb7781980" bit-offset="I:6" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="144:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h" ref="0xb777e9a0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="46:/usr/include/ctype.h" ref="0xb7a6a688" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="82:/usr/include/wchar.h" ref="0xb7a4c688" defined="" size="I:8" alignment="I:4">
      <field name="__count" ref="0xb7a4c798" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__value" ref="0xb7a4c7f8" bit-offset="I:32" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref ref="0xb7a4c398"/></type-tag>
      </field>
    </struct>
    <struct name="itimerval" loc="107:/usr/include/i386-linux-gnu/sys/time.h" ref="0xb7954b48" defined="" size="I:16" alignment="I:4">
      <field name="it_interval" ref="0xb7954f80" bit-offset="I:0" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="timeval" ref="0xb7bba8e0"/></type-tag>
      </field>
      <field name="it_value" ref="0xb7952010" bit-offset="I:64" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="timeval" ref="0xb7bba8e0"/></type-tag>
      </field>
    </struct>
    <enum loc="126:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128hardware.h" ref="0xb77885f8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="202:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7ba8ab0" defined="" size="I:32" alignment="I:4">
      <field name="__lock" ref="0xb7ba8dc0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__nr_readers" ref="0xb7ba8e20" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__readers_wakeup" ref="0xb7ba8e80" bit-offset="I:64" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__writer_wakeup" ref="0xb7ba8ee0" bit-offset="I:96" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__nr_readers_queued" ref="0xb7ba8f40" bit-offset="I:128" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__nr_writers_queued" ref="0xb7ba8fa0" bit-offset="I:160" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__flags" ref="0xb7ba7018" bit-offset="I:192" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="__shared" ref="0xb7ba7078" bit-offset="I:200" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="__rwelision" ref="0xb7ba70d8" bit-offset="I:208" size="I:1">
        <type-int cname="signed char" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="__pad2" ref="0xb7ba7138" bit-offset="I:216" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="__writer" ref="0xb7ba7198" bit-offset="I:224" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct loc="21:/usr/include/_G_config.h" ref="0xb7a4cd28" defined="" size="I:12" alignment="I:4">
      <field name="__pos" ref="0xb7a4ce38" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__off_t" ref="0xb7be14c0"/></typename>
        </type-int>
      </field>
      <field name="__state" ref="0xb7a4ce98" bit-offset="I:32" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0xb7a4c688"/>
          <typename><typedef-ref name="__mbstate_t" ref="0xb7a4c8b0"/></typename>
        </type-tag>
      </field>
    </struct>
    <union loc="231:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74d8010" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0xb74d8120" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0xb74d8180" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb74d9ae8"/></type-tag>
      </field>
    </union>
    <attribute name="count_nok" loc="12:/usr/lib/ncc/deputy_nodeputy.h" ref="0xb7f13328" defined="" size="I:4" alignment="I:4">
      <field name="n" ref="0xb7f134d8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <struct ref="0xb7f23f48" size="V:" alignment="V:">
    </struct>
    <enum loc="209:/usr/include/math.h" ref="0xb7a6ebe8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="sigevent" ref="0xb78bd9b8" size="V:" alignment="V:">
    </struct>
    <enum loc="76:/opt/tinyos-main-2.1.2/tos/lib/tossim/tos.h" ref="0xb79f0eb8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="138:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h" ref="0xb777e3d0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="673:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h" ref="0xb77d2590" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="315:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74cf620" defined="" size="I:1" alignment="I:1">
      <field name="ocf1c" ref="0xb74cf730" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocf3c" ref="0xb74cf790" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="tov3" ref="0xb74cf7f0" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocf3b" ref="0xb74cf850" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocf3a" ref="0xb74cf8b0" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="icf3" ref="0xb74cf910" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0xb74cf970" bit-offset="I:6" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
    </struct>
    <attribute name="one" loc="13:/usr/lib/ncc/deputy_nodeputy.h" ref="0xb7f13840" defined="" size="I:4" alignment="I:4">
      <field name="dummy" ref="0xb7f13a18" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <union loc="130:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7bac668" defined="" size="I:4" alignment="I:4">
      <field name="__size" ref="0xb7bac778" bit-offset="I:0" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0xb7bac7d8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <struct name="__locale_data" ref="0xb7c069d0" size="V:" alignment="V:">
    </struct>
    <attribute name="spontaneous"  loc="NONE" ref="0xb7f1a728" size="V:" alignment="V:">
    </attribute>
    <enum loc="75:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74ea508" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="50:/usr/include/i386-linux-gnu/bits/waitflags.h" ref="0xb7be79f8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="150:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h" ref="0xb777d9e8" defined="" size="I:1" alignment="I:1">
      <field name="adps" ref="0xb777daf8" bit-offset="I:0" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="adie" ref="0xb777db58" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="adif" ref="0xb777dbb8" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="adfr" ref="0xb777dc18" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="adsc" ref="0xb777dc78" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="aden" ref="0xb777dcd8" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
    </struct>
    <union loc="297:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74d05e8" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0xb74d06f8" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0xb74d0758" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb74d00f0"/></type-tag>
      </field>
    </union>
    <union loc="193:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74def28" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0xb74dd050" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0xb74dd0b0" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb74deaf0"/></type-tag>
      </field>
    </union>
    <attribute name="unsafe"  loc="NONE" ref="0xb7f1aef8" size="V:" alignment="V:">
    </attribute>
    <union loc="139:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7babd28" defined="" size="I:48" alignment="I:4">
      <field name="__data" ref="0xb7babe38" bit-offset="I:0" size="I:44">
        <type-tag size="I:44" alignment="I:4"><struct-ref ref="0xb7bab518"/></type-tag>
      </field>
      <field name="__size" ref="0xb7babe98" bit-offset="I:0" size="I:48">
        <type-array elements="I:48" size="I:48" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0xb7babef8" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </union>
    <enum loc="25:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h" ref="0xb7802b98" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="253:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74d7210" defined="" size="I:1" alignment="I:1">
      <field name="rsvd" ref="0xb74d7320" bit-offset="I:0" bit-size="I:5">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="focC" ref="0xb74d7380" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="focB" ref="0xb74d73e0" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="focA" ref="0xb74d7440" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="69:/usr/include/i386-linux-gnu/bits/waitstatus.h" ref="0xb7bd7730" defined="" size="I:4" alignment="I:4">
      <field name="__w_termsig" ref="0xb7bd7840" bit-offset="I:0" bit-size="I:7">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__w_coredump" ref="0xb7bd78a0" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__w_retcode" ref="0xb7bd7900" bit-offset="I:8" bit-size="I:8">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <union loc="156:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7ba94a8" defined="" size="I:4" alignment="I:4">
      <field name="__size" ref="0xb7ba95b8" bit-offset="I:0" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0xb7ba9618" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <union loc="174:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7ba75d0" defined="" size="I:32" alignment="I:4">
      <field name="__data" ref="0xb7ba76e0" bit-offset="I:0" size="I:32">
        <type-tag size="I:32" alignment="I:4"><struct-ref ref="0xb7ba8ab0"/></type-tag>
      </field>
      <field name="__size" ref="0xb7ba7740" bit-offset="I:0" size="I:32">
        <type-array elements="I:32" size="I:32" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0xb7ba77a0" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <union loc="245:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7ba5e40" defined="" size="I:4" alignment="I:4">
      <field name="__size" ref="0xb7ba5f50" bit-offset="I:0" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0xb7ba4010" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <nx_struct name="Msg" loc="7:project.h" ref="0xb7aa4ba8" defined="" size="I:5" alignment="I:1">
      <field name="isData" ref="0xb7802118" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0xb7c19728"/></typename>
        </type-int>
      </field>
      <field name="sender" ref="0xb7802178" bit-offset="I:8" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0xb7c19ba0"/></typename>
        </type-int>
      </field>
      <field name="value" ref="0xb78021d8" bit-offset="I:24" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0xb7c19ba0"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <struct loc="134:/usr/include/i386-linux-gnu/bits/types.h" ref="0xb7be1c88" defined="" size="I:8" alignment="I:4">
      <field name="__val" ref="0xb7be1d98" bit-offset="I:0" size="I:8">
        <type-array elements="I:2" size="I:8" alignment="I:4">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </type-array>
      </field>
    </struct>
    <struct loc="114:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7bad1b0" defined="" size="I:4" alignment="I:2">
      <field name="__espins" ref="0xb7bad2c0" bit-offset="I:0" size="I:2">
        <type-int cname="short" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="__elision" ref="0xb7bad320" bit-offset="I:16" size="I:2">
        <type-int cname="short" size="I:2" alignment="I:2"></type-int>
      </field>
    </struct>
    <attribute name="nts" loc="17:/usr/lib/ncc/deputy_nodeputy.h" ref="0xb7f110f8" defined="" size="I:4" alignment="I:4">
      <field name="dummy" ref="0xb7f112d0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <struct name="_IO_FILE_plus" ref="0xb7a44b80" size="V:" alignment="V:">
    </struct>
    <union loc="239:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7ba5760" defined="" size="I:20" alignment="I:4">
      <field name="__size" ref="0xb7ba5870" bit-offset="I:0" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0xb7ba58d0" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <struct name="exception" loc="372:/usr/include/math.h" ref="0xb7a6c788" defined="" size="I:32" alignment="I:4">
      <field name="type" ref="0xb7a6cce8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="name" ref="0xb7a6cd48" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="arg1" ref="0xb7a6cda8" bit-offset="I:64" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="arg2" ref="0xb7a6ce08" bit-offset="I:128" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="retval" ref="0xb7a6ce68" bit-offset="I:192" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
    </struct>
    <struct name="sim_log_channel" loc="56:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_log.c" ref="0xb79d0228" defined="" size="I:16" alignment="I:4">
      <field name="name" ref="0xb79d0838" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-qualified const="">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="numOutputs" ref="0xb79d0898" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="size" ref="0xb79d08f8" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="outputs" ref="0xb79d0958" bit-offset="I:96" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0xb7a4f770"/>
              <typename><typedef-ref name="FILE" ref="0xb7a4f9b0"/></typename>
            </type-tag>
          </type-pointer>
        </type-pointer>
      </field>
    </struct>
    <enum loc="104:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h" ref="0xb7781b98" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="C"  loc="NONE" ref="0xb7f1a2e0" size="V:" alignment="V:">
    </attribute>
    <struct name="sim_noise_hash_t" loc="64:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h" ref="0xb794c8e8" defined="" size="I:480" alignment="I:4">
      <field name="key" ref="0xb794b2a0" bit-offset="I:0" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="numElements" ref="0xb794b300" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="size" ref="0xb794b360" bit-offset="I:192" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="elements" ref="0xb794b3c0" bit-offset="I:224" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="flag" ref="0xb794b420" bit-offset="I:256" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="dist" ref="0xb794b480" bit-offset="I:288" size="I:444">
        <type-array elements="I:111" size="I:444" alignment="I:4">
          <type-float cname="float" size="I:4" alignment="I:4"></type-float>
        </type-array>
      </field>
    </struct>
    <enum loc="51:/opt/tinyos-main-2.1.2/tos/types/TinyError.h" ref="0xb7f172d0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="170:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74e0f38" defined="" size="I:1" alignment="I:1">
      <field name="psr321" ref="0xb74df070" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="psr0" ref="0xb74df0d0" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="pud" ref="0xb74df130" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="acme" ref="0xb74df190" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0xb74df1f0" bit-offset="I:4" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="tsm" ref="0xb74df250" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="13:project.h" ref="0xb78023d0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="macro"  loc="NONE" ref="0xb7f1aa58" size="V:" alignment="V:">
      <field name="macro_name" ref="0xb7f1ab68" bit-offset="U:" bit-size="U:">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
    </attribute>
    <enum loc="102:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h" ref="0xb7828940" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="126:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h" ref="0xb777f6f0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="105:/usr/include/stdlib.h" ref="0xb7bd44c8" defined="" size="I:8" alignment="I:4">
      <field name="quot" ref="0xb7bd45d8" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="rem" ref="0xb7bd4638" bit-offset="I:32" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <nx_struct name="tossim_header" loc="6:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimRadioMsg.h" ref="0xb782c638" defined="" size="I:7" alignment="I:1">
      <field name="dest" ref="0xb782ce60" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0xb782d410"/></typename>
        </type-int>
      </field>
      <field name="src" ref="0xb782cec0" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0xb782d410"/></typename>
        </type-int>
      </field>
      <field name="length" ref="0xb782cf20" bit-offset="I:32" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0xb7c19728"/></typename>
        </type-int>
      </field>
      <field name="group" ref="0xb782cf80" bit-offset="I:40" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_group_t" ref="0xb782d178"/></typename>
        </type-int>
      </field>
      <field name="type" ref="0xb782b010" bit-offset="I:48" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_id_t" ref="0xb782fdc0"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum loc="26:/opt/tinyos-main-2.1.2/tos/types/AM.h" ref="0xb782c010" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <nx_struct name="message_t" loc="14:/opt/tinyos-main-2.1.2/tos/types/message.h" ref="0xb7822c30" defined="" size="I:41" alignment="I:1">
      <field name="header" ref="0xb7821858" bit-offset="I:0" size="I:7">
        <type-array elements="I:7" size="I:7" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0xb7c19728"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="data" ref="0xb78218b8" bit-offset="I:56" size="I:28">
        <type-array elements="I:28" size="I:28" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0xb7c19728"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="footer" ref="0xb7821918" bit-offset="I:280" size="I:2">
        <type-array elements="I:2" size="I:2" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0xb7c19728"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="metadata" ref="0xb7821978" bit-offset="I:296" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0xb7c19728"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <struct name="sim_noise_node_t" loc="73:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h" ref="0xb794b820" defined="" size="I:68" alignment="I:4">
      <field name="key" ref="0xb7949798" bit-offset="I:0" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="freqKey" ref="0xb79497f8" bit-offset="I:160" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="lastNoiseVal" ref="0xb7949858" bit-offset="I:320" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="noiseGenTime" ref="0xb79498b8" bit-offset="I:352" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
        </type-int>
      </field>
      <field name="noiseTable" ref="0xb7949918" bit-offset="I:384" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0xb79d8c90"/></type-tag>
        </type-pointer>
      </field>
      <field name="noiseTrace" ref="0xb7949978" bit-offset="I:416" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="noiseTraceLen" ref="0xb79499d8" bit-offset="I:448" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
        </type-int>
      </field>
      <field name="noiseTraceIndex" ref="0xb7949a38" bit-offset="I:480" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
        </type-int>
      </field>
      <field name="generated" ref="0xb7949a98" bit-offset="I:512" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="43:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h" ref="0xb7787580" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="153:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h" ref="0xb74e1b28" defined="" size="I:1" alignment="I:1">
      <field name="tov0" ref="0xb74e1c38" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocf0" ref="0xb74e1c98" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="tov1" ref="0xb74e1cf8" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocf1b" ref="0xb74e1d58" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocf1a" ref="0xb74e1db8" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="icf1" ref="0xb74e1e18" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="tov2" ref="0xb74e1e78" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
      <field name="ocf2" ref="0xb74e1ed8" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="51:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h" ref="0xb7786010" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="54:/opt/tinyos-main-2.1.2/tos/platforms/micaz/sim/platform_hardware.h" ref="0xb777c420" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="atomic_hwevent"  loc="NONE" ref="0xb7f1a5b8" size="V:" alignment="V:">
    </attribute>
    <attribute name="dmemcpy" loc="16:/usr/lib/ncc/deputy_nodeputy.h" ref="0xb7f12a18" defined="" size="I:12" alignment="I:4">
      <field name="a1" ref="0xb7f12ca0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="a2" ref="0xb7f12d00" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="a3" ref="0xb7f12d60" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <struct name="__pthread_mutex_s" loc="92:/usr/include/i386-linux-gnu/bits/pthreadtypes.h" ref="0xb7bae8e0" defined="" size="I:24" alignment="I:4">
      <field name="__lock" ref="0xb7bad890" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__count" ref="0xb7bad8f0" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__owner" ref="0xb7bad950" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__kind" ref="0xb7bad9b0" bit-offset="I:96" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__nusers" ref="0xb7bada10" bit-offset="I:128" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__elision_data" ref="0xb7bada70" bit-offset="I:160" size="I:4">
        <type-tag size="I:4" alignment="I:2"><struct-ref ref="0xb7bad1b0"/></type-tag>
      </field>
      <field name="__list" ref="0xb7badad0" bit-offset="I:160" size="I:4">
        <type-tag size="I:4" alignment="I:4"><struct-ref name="__pthread_internal_slist" ref="0xb7bae1c0"/>
          <typename><typedef-ref name="__pthread_slist_t" ref="0xb7bae670"/></typename>
        </type-tag>
      </field>
    </struct>
    <enum loc="53:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimSchedulerBasicP.nc" ref="0xb7801c70" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="101:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc" ref="0xb765bc70" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="145:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc" ref="0xb765b358" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="96:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc" ref="0xb75b9638" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="receive_message" loc="66:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc" ref="0xb75b5878" defined="" scoped="" size="I:48" alignment="I:4">
      <component-ref qname="CpmModelC"/>
      <field name="source" ref="0xb75b4940" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="start" ref="0xb75b49a0" bit-offset="I:32" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="sim_time_t" ref="0xb79ee748"/></typename>
        </type-int>
      </field>
      <field name="end" ref="0xb75b4a00" bit-offset="I:96" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="sim_time_t" ref="0xb79ee748"/></typename>
        </type-int>
      </field>
      <field name="power" ref="0xb75b4a60" bit-offset="I:160" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="reversePower" ref="0xb75b4ac0" bit-offset="I:224" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="strength" ref="0xb75b4b20" bit-offset="I:288" size="I:1">
        <type-int cname="signed char" size="I:1" alignment="I:1">
          <typename><typedef-ref name="int8_t" ref="0xb7f118f8"/></typename>
        </type-int>
      </field>
      <field name="lost" ref="0xb75b4b80" bit-offset="I:296" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
        </type-int>
      </field>
      <field name="ack" ref="0xb75b4be0" bit-offset="I:304" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
        </type-int>
      </field>
      <field name="msg" ref="0xb75b4c40" bit-offset="I:320" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
            <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
          </type-tag>
        </type-pointer>
      </field>
      <field name="next" ref="0xb75b4ca0" bit-offset="I:352" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:48" alignment="I:4"><struct-ref name="receive_message" scoped="" ref="0xb75b5878"/>
            <typename><typedef-ref name="receive_message_t" scoped="" ref="0xb75b5b58"/></typename>
          </type-tag>
        </type-pointer>
      </field>
    </struct>
    <enum loc="71:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc" ref="0xb73c0858" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="74:/opt/tinyos-main-2.1.2/tos/lib/timer/AlarmToTimerC.nc" ref="0xb74eda80" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="AlarmToTimerC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="44:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" ref="0xb74a21f8" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="59:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc" ref="0xb73b7940" defined="" scoped="" size="I:12" alignment="I:4">
      <component-ref qname="VirtualizeTimerC"/>
      <field name="t0" ref="0xb73b7a50" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
        </type-int>
      </field>
      <field name="dt" ref="0xb73b7ab0" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
        </type-int>
      </field>
      <field name="isoneshot" ref="0xb73b7b10" bit-offset="I:64" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
        </type-int>
      </field>
      <field name="isrunning" ref="0xb73b7b70" bit-offset="I:65" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
        </type-int>
      </field>
      <field name="_reserved" ref="0xb73b7bd0" bit-offset="I:66" bit-size="I:6">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="53:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc" ref="0xb73b8bd0" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="126:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc" ref="0xb7341928" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="169:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc" ref="0xb7341010" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="47:/opt/tinyos-main-2.1.2/tos/system/AMQueueP.nc" ref="0xb7342460" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="AMQueueP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="55:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc" ref="0xb733c2f0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="AMQueueImplP"/>
      <field name="msg" ref="0xb733c400" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
            <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
          </type-tag>
        </type-pointer>
      </field>
    </struct>
  </tags>
  <variables>
    <variable name="randCM" ref="0xb78d6a80" loc="39:/opt/tinyos-main-2.1.2/tos/lib/tossim/randomlib.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="dummy" ref="0xb7862b20" loc="283:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="current_node" ref="0xb7945010" loc="52:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_tossim.c">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="test" ref="0xb78d4010" loc="41:/opt/tinyos-main-2.1.2/tos/lib/tossim/randomlib.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="__timezone" ref="0xb78b10f0" loc="284:/usr/include/time.h">
      <type-int cname="long" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="channelTable" ref="0xb79ce750" loc="68:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_log.c">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0xb79d8c90"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="noiseData" ref="0xb78a1d60" loc="58:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.c">
      <type-array elements="I:1000" size="I:68000" alignment="I:4">
        <type-tag size="I:68" alignment="I:4"><struct-ref name="sim_noise_node_t" ref="0xb794b820"/>
          <typename><typedef-ref name="sim_noise_node_t" ref="0xb7949b50"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="outputs" ref="0xb79ce498" loc="67:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_log.c">
      <type-array elements="I:195" size="I:1560" alignment="I:4">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="sim_log_output" ref="0xb79d1ab8"/>
          <typename><typedef-ref name="sim_log_output_t" ref="0xb79d0010"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="__tzname" ref="0xb78b2c90" loc="282:/usr/include/time.h">
      <type-array elements="I:2" size="I:8" alignment="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </type-array>
    </variable>
    <variable name="randU" ref="0xb78d6620" loc="39:/opt/tinyos-main-2.1.2/tos/lib/tossim/randomlib.c">
      <type-array elements="I:97" size="I:776" alignment="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </type-array>
    </variable>
    <variable name="timezone" ref="0xb78b1ca0" loc="298:/usr/include/time.h">
      <type-int cname="long" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="eventHeap" ref="0xb796cc80" loc="44:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_event_queue.c">
      <documentation loc="33:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_event_queue.h">
        <short>&#10; The event queue is the core of the mote side of TOSSIM.</short>
        <long>&#10; The event queue is the core of the mote side of TOSSIM. It is a&#10; wrapper around the underlying heap. Unlike the 1.x version, it is&#10; not re-entrant: merging the Python console and TOSSIM means that&#10; functionality like packet injection/reception from external tools&#10; is on the Python side.&#10;&#10; @author Phil Levis&#10; @date   November 22 2005&#10;</long>
      </documentation>
      <type-tag size="I:12" alignment="I:4"><struct-ref name="heap" ref="0xb7996570"/>
        <typename><typedef-ref name="heap_t" ref="0xb7996b28"/></typename>
      </type-tag>
    </variable>
    <variable name="csmaRxTxDelay" ref="0xb791bcf8" loc="54:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="numCase1" ref="0xb78a10c0" loc="51:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.c">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
        <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
      </documentation>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="randC" ref="0xb78d6790" loc="39:/opt/tinyos-main-2.1.2/tos/lib/tossim/randomlib.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="FreqKeyNum" ref="0xb78a1990" loc="56:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.c">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
      </type-int>
    </variable>
    <variable name="csmaLow" ref="0xb791c8e0" loc="47:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaPreambleLength" ref="0xb791b1a0" loc="50:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="numTotal" ref="0xb78a1690" loc="53:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="daylight" ref="0xb78b1a80" loc="297:/usr/include/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaExponentBase" ref="0xb791b478" loc="51:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="_IO_2_1_stdin_" ref="0xb7a44e30" loc="315:/usr/include/libio.h">
      <type-tag size="V:" alignment="V:"><struct-ref name="_IO_FILE_plus" ref="0xb7a44b80"/></type-tag>
    </variable>
    <variable name="randCD" ref="0xb78d6908" loc="39:/opt/tinyos-main-2.1.2/tos/lib/tossim/randomlib.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="j97" ref="0xb78d6da0" loc="40:/opt/tinyos-main-2.1.2/tos/lib/tossim/randomlib.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="TOS_NODE_ID" ref="0xb79ee478" loc="78:/opt/tinyos-main-2.1.2/tos/lib/tossim/tos.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0xb7d00490"/></typename>
      </type-int>
    </variable>
    <variable name="sys_errlist" ref="0xb79f5508" loc="27:/usr/include/i386-linux-gnu/bits/sys_errlist.h">
      <type-qualified const="">
        <type-array elements="V:" size="V:" alignment="V:">
          <type-qualified const="">
            <type-pointer size="I:4" alignment="I:4">
              <type-qualified const="">
                <type-int cname="char" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </type-qualified>
        </type-array>
      </type-qualified>
    </variable>
    <variable name="tzname" ref="0xb78b13a0" loc="289:/usr/include/time.h">
      <type-array elements="I:2" size="I:8" alignment="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </type-array>
    </variable>
    <variable name="STARTING_SIZE" ref="0xb7992a58" loc="58:/opt/tinyos-main-2.1.2/tos/lib/tossim/heap.c">
      <type-qualified const="">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-qualified>
    </variable>
    <variable name="=va_arg" ref="0xb7f1c128"  loc="NONE">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="_IO_2_1_stderr_" ref="0xb7a42448" loc="317:/usr/include/libio.h">
      <type-tag size="V:" alignment="V:"><struct-ref name="_IO_FILE_plus" ref="0xb7a44b80"/></type-tag>
    </variable>
    <variable name="csmaHigh" ref="0xb791c668" loc="46:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaMaxIterations" ref="0xb791b758" loc="52:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="atm128RegFile" ref="0xb77945c8" loc="51:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128hardware.h">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_tossim.h">
        <short>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-array elements="I:1000" size="I:160000" alignment="I:1">
        <type-array elements="I:160" size="I:160" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
          </type-int>
        </type-array>
      </type-array>
    </variable>
    <variable name="localNoise" ref="0xb78fce10" loc="10:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_gain.c">
      <type-array elements="I:1001" size="I:16016" alignment="I:4">
        <type-tag size="I:16" alignment="I:4"><struct-ref name="sim_gain_noise" ref="0xb78fc148"/>
          <typename><typedef-ref name="sim_gain_noise_t" ref="0xb78fc5d0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="_IO_2_1_stdout_" ref="0xb7a42150" loc="316:/usr/include/libio.h">
      <type-tag size="V:" alignment="V:"><struct-ref name="_IO_FILE_plus" ref="0xb7a44b80"/></type-tag>
    </variable>
    <variable name="csmaInitLow" ref="0xb791c3e0" loc="45:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="numCase2" ref="0xb78a1408" loc="52:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="sim_ticks" ref="0xb7947d80" loc="51:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_tossim.c">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0xb79ee748"/></typename>
      </type-int>
    </variable>
    <variable name="__daylight" ref="0xb78b2ea0" loc="283:/usr/include/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="stderr" ref="0xb7a338a0" loc="170:/usr/include/stdio.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0xb7a4f770"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="connectivity" ref="0xb78fc9f8" loc="9:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_gain.c">
      <type-array elements="I:1001" size="I:4004" alignment="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:16" alignment="I:4"><struct-ref name="gain_entry" ref="0xb7904d60"/>
            <typename><typedef-ref name="gain_entry_t" ref="0xb7903400"/></typename>
          </type-tag>
        </type-pointer>
      </type-array>
    </variable>
    <variable name="sys_nerr" ref="0xb79f5250" loc="26:/usr/include/i386-linux-gnu/bits/sys_errlist.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="stdin" ref="0xb7a33380" loc="168:/usr/include/stdio.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0xb7a4f770"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="simTimeBuf" ref="0xb792a6d8" loc="183:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_tossim.c">
      <type-array elements="I:128" size="I:128" alignment="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </type-array>
    </variable>
    <variable name="sim_seed" ref="0xb7945210" loc="53:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_tossim.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="_LIB_VERSION" ref="0xb7a6c5a8" loc="359:/usr/include/math.h">
      <type-tag size="I:4" alignment="I:4"><enum-ref ref="0xb7a6d838"/>
        <typename><typedef-ref name="_LIB_VERSION_TYPE" ref="0xb7a6c2c0"/></typename>
      </type-tag>
    </variable>
    <variable name="sensitivity" ref="0xb78fb048" loc="11:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_gain.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="signgam" ref="0xb7a6ea68" loc="168:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaInitHigh" ref="0xb791c140" loc="44:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="stdout" ref="0xb7a33610" loc="169:/usr/include/stdio.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0xb7a4f770"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="csmaAckTime" ref="0xb791a010" loc="55:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaSymbolsPerSec" ref="0xb791cbc0" loc="48:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaMinFreeSamples" ref="0xb791ba40" loc="53:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaBitsPerSymbol" ref="0xb791cea0" loc="49:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="i97" ref="0xb78d6c48" loc="40:/opt/tinyos-main-2.1.2/tos/lib/tossim/randomlib.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="sim_scheduler_event_pending" ref="0xb7800e00" loc="66:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="m_tail" ref="0xb7800848" loc="60:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
      </type-int>
    </variable>
    <variable name="m_head" ref="0xb7800638" loc="59:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
      </type-int>
    </variable>
    <variable name="m_next" ref="0xb7800b28" loc="61:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-array elements="I:7" size="I:7" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="sim_scheduler_event" ref="0xb77ff1b8" loc="67:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0xb79e85b8"/>
        <typename><typedef-ref name="sim_event_t" ref="0xb79e8820"/></typename>
      </type-tag>
    </variable>
    <variable name="bootEvent" ref="0xb7695470" loc="53:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0xb79e85b8"/>
          <typename><typedef-ref name="sim_event_t" ref="0xb79e8820"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="startTime" ref="0xb7695010" loc="51:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
    </variable>
    <variable name="euid" ref="0xb7690d38" loc="50:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
    </variable>
    <variable name="isOn" ref="0xb76951f8" loc="52:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="buffer" ref="0xb763dee0" loc="62:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimActiveMessageC.nc">
      <component-ref qname="TossimActiveMessageC"/>
      <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
        <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
      </type-tag>
    </variable>
    <variable name="bufferPointer" ref="0xb7644190" loc="63:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimActiveMessageC.nc">
      <component-ref qname="TossimActiveMessageC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
          <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="sendEvent" ref="0xb75fb408" loc="78:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0xb79e85b8"/>
        <typename><typedef-ref name="sim_event_t" ref="0xb79e8820"/></typename>
      </type-tag>
    </variable>
    <variable name="initialized" ref="0xb75f7d80" loc="70:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="error" ref="0xb75c18f0" loc="294:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
      </type-int>
    </variable>
    <variable name="backoffCount" ref="0xb75fc370" loc="72:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
      </type-int>
    </variable>
    <variable name="neededFreeSamples" ref="0xb75fc5f0" loc="73:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
      </type-int>
    </variable>
    <variable name="sending" ref="0xb75fc840" loc="74:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
          <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="running" ref="0xb75fc068" loc="71:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="receiveBuffer" ref="0xb75fb678" loc="80:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
        <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
      </type-tag>
    </variable>
    <variable name="sendingLength" ref="0xb75fcf08" loc="76:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
      </type-int>
    </variable>
    <variable name="transmitting" ref="0xb75fcbf8" loc="75:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="destNode" ref="0xb75fb1b0" loc="77:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="collision" ref="0xb7597560" loc="201:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="requestAck" ref="0xb75b6e08" loc="59:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="receiveEvent" ref="0xb7597010" loc="198:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0xb79e85b8"/>
        <typename><typedef-ref name="sim_event_t" ref="0xb79e8820"/></typename>
      </type-tag>
    </variable>
    <variable name="transmissionEndTime" ref="0xb75b5680" loc="62:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0xb79ee748"/></typename>
      </type-int>
    </variable>
    <variable name="incomingSource" ref="0xb7597c10" loc="203:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="outstandingReceptionHead" ref="0xb75b3010" loc="79:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:48" alignment="I:4"><struct-ref name="receive_message" scoped="" ref="0xb75b5878"/>
          <typename><typedef-ref name="receive_message_t" scoped="" ref="0xb75b5b58"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="incoming" ref="0xb7597878" loc="202:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
          <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="clearThreshold" ref="0xb7597238" loc="200:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="transmitting" ref="0xb75b5328" loc="61:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="outgoing" ref="0xb75b6be8" loc="58:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
          <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="receiving" ref="0xb75b5048" loc="60:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="group" ref="0xb7545f28" loc="67:/opt/tinyos-main-2.1.2/tos/lib/tossim/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="am_group_t" ref="0xb782d8a0"/></typename>
      </type-int>
    </variable>
    <variable name="addr" ref="0xb7545d00" loc="66:/opt/tinyos-main-2.1.2/tos/lib/tossim/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
      </type-int>
    </variable>
    <variable name="set" ref="0xb7545a30" loc="65:/opt/tinyos-main-2.1.2/tos/lib/tossim/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="locked" ref="0xb7527208" loc="38:projectSinkC.nc">
      <component-ref qname="projectSinkC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="mote_treshold" ref="0xb7527a30" loc="41:projectSinkC.nc">
      <component-ref qname="projectSinkC"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0xb7d00490"/></typename>
      </type-int>
    </variable>
    <variable name="data" ref="0xb75277c8" loc="40:projectSinkC.nc">
      <component-ref qname="projectSinkC"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0xb7d00490"/></typename>
      </type-int>
    </variable>
    <variable name="packet" ref="0xb7527010" loc="37:projectSinkC.nc">
      <component-ref qname="projectSinkC"/>
      <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
        <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
      </type-tag>
    </variable>
    <variable name="isNewTreshold" ref="0xb7527500" loc="39:projectSinkC.nc">
      <component-ref qname="projectSinkC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="base" ref="0xb74a20b8" loc="40:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
      </type-int>
    </variable>
    <variable name="t0" ref="0xb749fd20" loc="39:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
      </type-int>
    </variable>
    <variable name="set" ref="0xb749fb28" loc="38:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
      </type-int>
    </variable>
    <variable name="dt" ref="0xb749fe70" loc="39:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
      </type-int>
    </variable>
    <variable name="oldScale" ref="0xb7462ef8" loc="80:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <documentation loc="76:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
        <short> This variable is needed to keep track of when the underlying&#10;  timer starts, in order to reset lastZero.</short>
        <long> This variable is needed to keep track of when the underlying&#10;  timer starts, in order to reset lastZero. When oldScale is&#10;  AVR_CLOCK_OFF and the scale is set to something else, the&#10;  clock starts ticking. *</long>
      </documentation>
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
      </type-int>
    </variable>
    <variable name="lastZero" ref="0xb7462c18" loc="74:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0xb79ee748"/></typename>
      </type-int>
    </variable>
    <variable name="overflow" ref="0xb73fe728" loc="480:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0xb79e85b8"/>
          <typename><typedef-ref name="sim_event_t" ref="0xb79e8820"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="compare" ref="0xb744f358" loc="185:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0xb79e85b8"/>
          <typename><typedef-ref name="sim_event_t" ref="0xb79e8820"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="savedCounter" ref="0xb74651b0" loc="58:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
      </type-int>
    </variable>
    <variable name="inOverflow" ref="0xb7466e78" loc="57:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="m_dt" ref="0xb73d5708" loc="55:/opt/tinyos-main-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="AlarmToTimerC"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
      </type-int>
    </variable>
    <variable name="m_oneshot" ref="0xb73d5920" loc="56:/opt/tinyos-main-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="AlarmToTimerC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="m_timers_changed" ref="0xb73b6270" loc="69:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </variable>
    <variable name="m_timers" ref="0xb73b6010" loc="68:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref scoped="" ref="0xb73b7940"/>
          <typename><typedef-ref name="Timer_t" scoped="" ref="0xb73b7c88"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="seed" ref="0xb73767c0" loc="52:/opt/tinyos-main-2.1.2/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
      </type-int>
    </variable>
    <variable name="current" ref="0xb733c6d0" loc="59:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
      </type-int>
    </variable>
    <variable name="queue" ref="0xb733cb28" loc="60:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-tag size="I:4" alignment="I:4"><struct-ref scoped="" ref="0xb733c2f0"/>
          <typename><typedef-ref name="queue_entry_t" scoped="" ref="0xb733c4b8"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="cancelMask" ref="0xb733a048" loc="61:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
        </type-int>
      </type-array>
    </variable>
  </variables>
  <constants>
    <constant cst="I:3" name="ACIE" ref="0xb77a8530" loc="1075:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="OCDR7" ref="0xb77b4ad8" loc="943:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PB6" ref="0xb77a3570" loc="1132:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TXB81" ref="0xb77aad40" loc="1058:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:26" name="ATM128_ADC_DIFF_ADC22_1x" ref="0xb7782240" loc="85:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:40" name="ATM128_OCR1BL" ref="0xb77dd568" loc="140:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:17" name="ATM128_DDRD" ref="0xb77e2850" loc="81:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TOIE0" ref="0xb77c1438" loc="786:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PING0" ref="0xb7794200" loc="1299:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_FREE_RUNNING_OFF" ref="0xb777e010" loc="133:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ATM128_WAVE16_PWM_CAPTURE_HIGH" ref="0xb74da298" loc="222:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:21" name="ATM128_ADC_DIFF_ADC51_1x" ref="0xb77836a0" loc="80:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="SRL0" ref="0xb77cd1f8" loc="705:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS30" ref="0xb77b5640" loc="924:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINA2" ref="0xb77a4e50" loc="1126:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINB4" ref="0xb77a1568" loc="1154:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ICES3" ref="0xb77b6d58" loc="919:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINC6" ref="0xb779fc70" loc="1182:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ADLAR" ref="0xb77a7e50" loc="1093:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PA2" ref="0xb77a51c0" loc="1106:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WGMA1" ref="0xb77b90e8" loc="876:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WGMB3" ref="0xb77b7600" loc="902:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="TOS_SERIAL_UNKNOWN_ID" ref="0xb78287e0" loc="98:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="TWA3" ref="0xb77cf8e0" loc="687:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM1B1" ref="0xb77b9830" loc="882:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ADHSM" ref="0xb77b23e0" loc="961:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="P_ALL" ref="0xb7be7b08" loc="52:/usr/include/i386-linux-gnu/bits/waitflags.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="INT3" ref="0xb77c81f8" loc="763:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ISC31" ref="0xb77cb0a8" loc="730:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINF3" ref="0xb7796200" loc="1275:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-1" name="_IEEE_" ref="0xb7a6da30" loc="349:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="ATM128_WAVE16_PWM_FAST_COMPARE" ref="0xb74dae20" loc="227:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM21" ref="0xb77bb7c8" loc="858:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WGM33" ref="0xb77b6f20" loc="920:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="ATM128_WAVE16_RESERVED" ref="0xb74da950" loc="225:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_ADC_SNGL_ADC5" ref="0xb7785330" loc="64:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:129" name="ATM128_ICR3H" ref="0xb77d7dd8" loc="269:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="XMM0" ref="0xb77cde60" loc="714:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS2" ref="0xb77bdcd8" loc="839:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32768" name="_ISgraph" ref="0xb7a65498" loc="55:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:51" name="ATM128_TCCR0" ref="0xb77db130" loc="169:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="FOC1C" ref="0xb77b4740" loc="939:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_RIGHT_ADJUST" ref="0xb7786248" loc="52:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PB0" ref="0xb77a2010" loc="1138:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PC2" ref="0xb77a06d0" loc="1166:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:134" name="ATM128_OCR3AL" ref="0xb77d6ec8" loc="283:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WDP1" ref="0xb77b3e78" loc="956:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PD4" ref="0xb779ee28" loc="1194:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PE6" ref="0xb779b570" loc="1222:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_CLK8_DIVIDE_128" ref="0xb74ec750" loc="58:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM00" ref="0xb77bc780" loc="847:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ADPS2" ref="0xb77a7558" loc="1086:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TWA6" ref="0xb77cf3a0" loc="684:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:140" name="ATM128_TCCR3C" ref="0xb77d5e00" loc="298:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="INT6" ref="0xb77c9c98" loc="760:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SRW10" ref="0xb77bfd50" loc="817:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="USBS0" ref="0xb77aff18" loc="1004:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_WAVE16_PWM_FAST_8BIT" ref="0xb74db6b0" loc="217:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_PORTE" ref="0xb77e4440" loc="36:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC0" ref="0xb77bc228" loc="844:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PIND0" ref="0xb779b200" loc="1218:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINE2" ref="0xb77998f8" loc="1246:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WDCE" ref="0xb77b3948" loc="953:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADC_PRESCALE_16" ref="0xb7780648" loc="109:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="ATM128_WAVE16_CTC_CAPTURE" ref="0xb74da738" loc="224:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ICES" ref="0xb77b7438" loc="901:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:50" name="ATM128_TCNT0" ref="0xb77dced0" loc="166:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_POWER_ADC_NR" ref="0xb7788a48" loc="128:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="AVR_CLOCK_DIVIDE_8" ref="0xb74eab38" loc="78:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_COMPARE_SET" ref="0xb74e9ec0" loc="94:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDA6" ref="0xb77a58b0" loc="1112:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_CLK8_NORMAL" ref="0xb74f0d00" loc="54:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ISC71" ref="0xb77cbef8" loc="740:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="REFS0" ref="0xb77a7c88" loc="1092:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDF7" ref="0xb7798c00" loc="1261:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1024" name="_ISalpha" ref="0xb7a68da8" loc="50:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="SERIAL_PROTO_PACKET_UNKNOWN" ref="0xb7827308" loc="106:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADCSR" ref="0xb77e4e68" loc="47:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:55" name="ATM128_TIMSK" ref="0xb77dbbb8" loc="182:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:46" name="ATM128_TCCR1B" ref="0xb77dc668" loc="154:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="NOISE_BIN_SIZE" ref="0xb794d890" loc="56:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="OCDR2" ref="0xb77b33e8" loc="948:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="UPM00" ref="0xb77afd50" loc="1003:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="OCIE2" ref="0xb77c2788" loc="779:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCF3C" ref="0xb77bf650" loc="811:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="SM2" ref="0xb77be430" loc="821:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PF0" ref="0xb7798a30" loc="1258:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOV1" ref="0xb77c1ed8" loc="794:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PG2" ref="0xb7796c78" loc="1283:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="UCSZ10" ref="0xb77af610" loc="997:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:30" name="ATM128_ADC_SNGL_1_23" ref="0xb7782ad8" loc="89:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_WAVE8_CTC" ref="0xb74e92e0" loc="85:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:59" name="ATM128_RAMPZ" ref="0xb77da450" loc="194:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="INTF3" ref="0xb77c2058" loc="773:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TWWC" ref="0xb77d2e38" loc="679:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="RAMPZ0" ref="0xb77cceb0" loc="727:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="ATM128_ADC_DIFF_ADC10_10x" ref="0xb7785bb0" loc="68:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="ATM128_ADC_DIFF_ADC22_10x" ref="0xb7784290" loc="71:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="XDIV3" ref="0xb77cc778" loc="721:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:125" name="HDLC_CTLESC_BYTE" ref="0xb782ac50" loc="89:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UPE1" ref="0xb77adcf0" loc="1025:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_WAVE16_PWM_FAST_9BIT" ref="0xb74db8f8" loc="218:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_INT_ENABLE_OFF" ref="0xb777ebf0" loc="145:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="_SVID_" ref="0xb7a6dba8" loc="350:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="EOFF" ref="0xb7f17b88" loc="56:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_INT_ENABLE_ON" ref="0xb777ee20" loc="146:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:130" name="ATM128_OCR3C" ref="0xb77d6010" loc="272:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDF1" ref="0xb7797710" loc="1267:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDG3" ref="0xb77953a0" loc="1289:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MPCM1" ref="0xb77ac0a8" loc="1027:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDB0" ref="0xb77a2e20" loc="1148:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDC2" ref="0xb779f550" loc="1176:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDD4" ref="0xb779dc30" loc="1204:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDE6" ref="0xb779a3a0" loc="1232:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCF1B" ref="0xb77c1d18" loc="793:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="FOC3B" ref="0xb77b4010" loc="933:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PE1" ref="0xb779bde0" loc="1227:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCIE1A" ref="0xb77c2cf0" loc="782:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SPR0" ref="0xb77b1e58" loc="980:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PF3" ref="0xb7798520" loc="1255:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_CLK8_DIVIDE_8" ref="0xb74ec010" loc="55:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXC0" ref="0xb77ac278" loc="1030:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_ACSR" ref="0xb77e34d8" loc="54:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADCW" ref="0xb77e4650" loc="39:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:125" name="ATM128_ETIMSK" ref="0xb77d77a8" loc="264:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="XDIV6" ref="0xb77cc220" loc="718:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_CLK8_DIVIDE_32" ref="0xb74ec278" loc="56:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:100" name="ATM128_DDRG" ref="0xb77d9120" loc="216:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOIE3" ref="0xb77c09b0" loc="802:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINF1" ref="0xb7796590" loc="1277:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PING3" ref="0xb7795c80" loc="1296:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TWS5" ref="0xb77ce560" loc="696:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS21" ref="0xb77bbb48" loc="860:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINA5" ref="0xb77a48f8" loc="1123:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:112" name="ATM128_TWBR" ref="0xb77d8248" loc="238:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:67" name="SERIAL_PROTO_ACK" ref="0xb7828b38" loc="103:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:40" name="ATM128_OCR1B" ref="0xb77dd350" loc="139:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINB7" ref="0xb77a1010" loc="1151:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PA5" ref="0xb77a6c58" loc="1103:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:38" name="ATM128_ICR1" ref="0xb77e0ca0" loc="134:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_INT_FLAG_OFF" ref="0xb777e608" loc="139:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDA1" ref="0xb77a41d0" loc="1117:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDB3" ref="0xb77a28e0" loc="1145:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDC5" ref="0xb779f010" loc="1173:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDD7" ref="0xb779d6f0" loc="1201:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_FREE_RUNNING_ON" ref="0xb777e250" loc="134:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_CLK8_DIVIDE_1024" ref="0xb74ecc38" loc="60:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="ATM128_WAVE16_PWM_FAST_CAPTURE" ref="0xb74dabb8" loc="226:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="NOISE_MIN_TRACE" ref="0xb794c238" loc="60:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:132" name="ATM128_OCR3BL" ref="0xb77d6878" loc="278:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ISC10" ref="0xb77cb990" loc="735:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINF6" ref="0xb7797c70" loc="1272:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDF2" ref="0xb7797550" loc="1266:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDG4" ref="0xb77951e0" loc="1288:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS02" ref="0xb77bcb08" loc="849:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WGM00" ref="0xb77bc3f0" loc="845:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM12" ref="0xb77b6478" loc="912:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_POWER_IDLE" ref="0xb77887f8" loc="127:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COMB0" ref="0xb77bab78" loc="873:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ERESERVE" ref="0xb7a1a2f0" loc="60:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRE1" ref="0xb77ad7c0" loc="1022:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="ATM128_ADC_DIFF_ADC01_1x" ref="0xb7784b78" loc="75:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:144" name="ATM128_UBRR0H" ref="0xb77d4058" loc="301:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:154" name="ATM128_UCSR1B" ref="0xb77d48f8" loc="313:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="_ISblank" ref="0xb7a65c48" loc="56:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXCIE" ref="0xb77ab0a8" loc="1040:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ADIE" ref="0xb77a7390" loc="1085:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="JTD" ref="0xb77be978" loc="826:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_ENABLE_OFF" ref="0xb777f368" loc="121:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:109" name="ATM128_XMCRA" ref="0xb77d9dd8" loc="232:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="COM3C1" ref="0xb77b8af8" loc="894:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SPIF" ref="0xb77b2cb0" loc="968:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SRE" ref="0xb77bf9d8" loc="815:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:19" name="ATM128_PINC" ref="0xb77e2c80" loc="87:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="SRW01" ref="0xb77cd3c0" loc="706:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINC1" ref="0xb779e590" loc="1187:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PIND3" ref="0xb779cc88" loc="1215:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINE5" ref="0xb77993a0" loc="1243:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:56" name="ATM128_EIFR" ref="0xb77dbdc8" loc="185:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:53" name="ATM128_MCUCR" ref="0xb77db788" loc="176:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="OCDR0" ref="0xb77b3778" loc="950:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:136" name="ATM128_TCNT3" ref="0xb77d5358" loc="287:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_ADC_SNGL_ADC2" ref="0xb7786c48" loc="61:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="ATM128_ADC_DIFF_ADC32_200x" ref="0xb7784948" loc="74:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_ADC_PRESCALE_4" ref="0xb7780220" loc="107:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDE1" ref="0xb779ac60" loc="1237:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:49" name="ATM128_OCR0" ref="0xb77dccb0" loc="163:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ISC50" ref="0xb77ca808" loc="745:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:39" name="ATM128_ICR1H" ref="0xb77dd130" loc="136:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="ATM128_ICR3L" ref="0xb77d7bc8" loc="268:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="INTF1" ref="0xb77c23e8" loc="775:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="EINVAL" ref="0xb7f17f20" loc="58:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ATM128_ADC_DIFF_ADC10_200x" ref="0xb7784058" loc="70:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="ATM128_ADC_DIFF_ADC22_200x" ref="0xb7784708" loc="73:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-115" name="NOISE_MIN" ref="0xb794ea88" loc="52:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:25" name="ATM128_ADC_DIFF_ADC12_1x" ref="0xb7782010" loc="84:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="SE" ref="0xb77bfef8" loc="818:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ADSC" ref="0xb77a8e10" loc="1082:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="OCDR5" ref="0xb77b4e68" loc="945:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PB4" ref="0xb77a38d0" loc="1134:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PC6" ref="0xb77a0010" loc="1162:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:43" name="ATM128_OCR1AH" ref="0xb77dddd0" loc="146:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:120" name="ATM128_OCR1CL" ref="0xb77d8ec0" loc="254:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_PINF" ref="0xb7802d68" loc="27:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="ATM128_DDRB" ref="0xb77e1550" loc="99:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINA0" ref="0xb77a3200" loc="1128:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINB2" ref="0xb77a18f8" loc="1156:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINC4" ref="0xb779e038" loc="1184:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PIND6" ref="0xb779c730" loc="1212:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ICES1" ref="0xb77b60e8" loc="910:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TWPS0" ref="0xb77cec70" loc="700:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TXEN" ref="0xb77ab7b8" loc="1044:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ01" ref="0xb77ae100" loc="1005:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PA0" ref="0xb77a5520" loc="1108:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="UMSEL1" ref="0xb77b0cd0" loc="992:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="INTF6" ref="0xb77c8ad8" loc="770:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TWA1" ref="0xb77cfc60" loc="689:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXC1" ref="0xb77ad5f8" loc="1021:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_TIMER_COMPARE_SET" ref="0xb74de160" loc="189:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="COM1C1" ref="0xb77b9bd0" loc="884:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="INT1" ref="0xb77c8578" loc="765:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_ENABLE_ON" ref="0xb777f570" loc="122:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_WAVE16_CTC_COMPARE" ref="0xb74db468" loc="216:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WGM31" ref="0xb77b8e90" loc="896:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS0" ref="0xb77bc058" loc="841:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXCIE1" ref="0xb77aa280" loc="1052:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-5" name="NOISE_MAX" ref="0xb794ece0" loc="53:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ACME" ref="0xb77b25a0" loc="962:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADCL" ref="0xb77e4a48" loc="43:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC1A" ref="0xb77b43b0" loc="937:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PC0" ref="0xb77a0a30" loc="1168:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PD2" ref="0xb779d1c0" loc="1196:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PE4" ref="0xb779b8d0" loc="1224:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PF6" ref="0xb7798010" loc="1252:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ADPS0" ref="0xb77a78e8" loc="1088:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TWA4" ref="0xb77cf720" loc="686:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="UPM0" ref="0xb77b03d8" loc="985:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:18" name="ATM128_ADC_DIFF_ADC21_1x" ref="0xb7783010" loc="77:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="FP_NAN" ref="0xb7a6ed88" loc="211:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:139" name="ATM128_TCCR3A" ref="0xb77d5bd8" loc="295:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_COMPARE_OFF" ref="0xb74e98b8" loc="91:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="NOISE_DEFAULT_ELEMENT_SIZE" ref="0xb794dd40" loc="58:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_CLK16_EXTERNAL_RISE" ref="0xb74ea2a8" loc="71:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:21" name="ATM128_PORTC" ref="0xb77e1130" loc="93:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="RXB80" ref="0xb77a9a00" loc="1067:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINE0" ref="0xb7799c88" loc="1248:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS00" ref="0xb77bce88" loc="851:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ITIMER_VIRTUAL" ref="0xb7954748" loc="97:/usr/include/i386-linux-gnu/sys/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS12" ref="0xb77b6638" loc="913:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ICNC" ref="0xb77b7278" loc="900:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRIE0" ref="0xb77a92d8" loc="1063:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:60" name="ATM128_XDIV" ref="0xb77da660" loc="197:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDA4" ref="0xb77a5c30" loc="1114:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDB6" ref="0xb77a23a0" loc="1142:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SPMEN" ref="0xb77c9908" loc="756:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ISC01" ref="0xb77cbb58" loc="736:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDF5" ref="0xb7797010" loc="1263:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="BLBSET" ref="0xb77c93b0" loc="753:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PGWRT" ref="0xb77c9578" loc="754:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="FOCC" ref="0xb77b5b90" loc="929:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="COMA1" ref="0xb77ba620" loc="870:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:111" name="ATM128_OSCCAL" ref="0xb77d8038" loc="235:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="AS0" ref="0xb77bbec8" loc="864:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="UPM10" ref="0xb77af0a8" loc="994:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:98" name="ATM128_PORTF" ref="0xb77dacc0" loc="210:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="UCPOL1" ref="0xb77af7e0" loc="998:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TXEN1" ref="0xb77aa7e0" loc="1055:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ACBG" ref="0xb77a8010" loc="1072:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCIE0" ref="0xb77c1270" loc="785:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCF3A" ref="0xb77bf100" loc="808:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="SM0" ref="0xb77be280" loc="820:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PG0" ref="0xb7795010" loc="1285:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:149" name="ATM128_UCSR0C" ref="0xb77d4280" loc="304:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:45" name="ATM128_TCNT1H" ref="0xb77dc440" loc="151:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:136" name="ATM128_TCNT3L" ref="0xb77d5570" loc="288:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WDE" ref="0xb77b3af8" loc="954:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ADFR" ref="0xb77a7010" loc="1083:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="MUX1" ref="0xb77a6578" loc="1097:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:24" name="ATM128_ADC_DIFF_ADC02_1x" ref="0xb7783d30" loc="83:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_ADC_PRESCALE_32" ref="0xb7780860" loc="110:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="FP_ZERO" ref="0xb7a6d1f8" loc="217:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="COM3A0" ref="0xb77b8588" loc="891:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="XDIV1" ref="0xb77ccb08" loc="723:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ2" ref="0xb77abb40" loc="1046:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:134" name="ATM128_OCR3A" ref="0xb77d6cb0" loc="282:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:156" name="ATM128_UDR1" ref="0xb77d4d30" loc="319:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDG1" ref="0xb7795720" loc="1291:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="FALSE" ref="0xb79ee058" loc="76:/opt/tinyos-main-2.1.2/tos/lib/tossim/tos.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="EBUSY" ref="0xb7f17d50" loc="57:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32768" name="ATM128_TIMER0_TICKSPPS" ref="0xb777b328" loc="61:/opt/tinyos-main-2.1.2/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDC0" ref="0xb779f8d0" loc="1178:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDD2" ref="0xb779c010" loc="1206:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDE4" ref="0xb779a720" loc="1234:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:30" name="CHANNEL_BANDGAP" ref="0xb777ce80" loc="58:/opt/tinyos-main-2.1.2/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCIE3C" ref="0xb77c0b80" loc="803:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_CLK16_OFF" ref="0xb74eb0a8" loc="64:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ISC41" ref="0xb77ca9d0" loc="746:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="_XOPEN_" ref="0xb7a6dd28" loc="351:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TWGCE" ref="0xb77ce010" loc="691:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CSB1" ref="0xb77b7b48" loc="905:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="MUX4" ref="0xb77a6038" loc="1094:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_POWER_EXT_STANDBY" ref="0xb7788cd0" loc="129:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DOR0" ref="0xb77ac970" loc="1034:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PB7" ref="0xb77a33c0" loc="1131:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_WAVE8_PWM_FAST" ref="0xb74e94f0" loc="86:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOIE1" ref="0xb77c10a8" loc="784:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="DEFAULT_CHANNEL_SIZE" ref="0xb79d18a8" loc="48:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_log.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_DDRE" ref="0xb77e4220" loc="33:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PING1" ref="0xb7794038" loc="1298:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_COMPARE_CLEAR" ref="0xb74e9cd0" loc="93:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TWS3" ref="0xb77ce8e0" loc="698:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="SRL1" ref="0xb77cd038" loc="704:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:116" name="ATM128_TWCR" ref="0xb77d8a88" loc="250:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS31" ref="0xb77b5480" loc="923:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINA3" ref="0xb77a4c88" loc="1125:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINB5" ref="0xb77a13a0" loc="1153:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINC7" ref="0xb779faa8" loc="1181:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="CPOL" ref="0xb77b1918" loc="977:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SPE" ref="0xb77b13d8" loc="974:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PA3" ref="0xb77a5010" loc="1105:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:17" name="ATM128_ADC_DIFF_ADC11_1x" ref="0xb7784da8" loc="76:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="COM1A0" ref="0xb77b9660" loc="881:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:115" name="ATM128_TWDR" ref="0xb77d8878" loc="247:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="INT4" ref="0xb77c8038" loc="762:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:130" name="ATM128_OCR3CL" ref="0xb77d6228" loc="273:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:135" name="ATM128_OCR3AH" ref="0xb77d5138" loc="284:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ISC20" ref="0xb77cb600" loc="733:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINF4" ref="0xb7796038" loc="1274:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WGM10" ref="0xb77b81d8" loc="887:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADC_SNGL_ADC6" ref="0xb7785538" loc="65:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="XMM1" ref="0xb77cdca0" loc="713:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="COMC0" ref="0xb77baf08" loc="875:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="NOISE_QUANTIZE_INTERVAL" ref="0xb794d288" loc="55:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PB1" ref="0xb77a3de0" loc="1137:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PC3" ref="0xb77a0520" loc="1165:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="_ISpunct" ref="0xb7a64bd8" loc="58:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="WDP2" ref="0xb77b3cb8" loc="955:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PD5" ref="0xb779ec78" loc="1193:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PE7" ref="0xb779b3c0" loc="1221:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:152" name="ATM128_UBRR1H" ref="0xb77d44a8" loc="307:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM01" ref="0xb77bc5b8" loc="846:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:52" name="ATM128_MCUSR" ref="0xb77db350" loc="172:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TICIE3" ref="0xb77c0448" loc="799:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WDRF" ref="0xb77becf8" loc="828:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WGM0" ref="0xb77bd5e8" loc="835:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RWWSRE" ref="0xb77c91e0" loc="752:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRIE" ref="0xb77ab438" loc="1042:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="INT7" ref="0xb77c9ad8" loc="759:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16384" name="_ISprint" ref="0xb7a66cc0" loc="54:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FE0" ref="0xb77ac7b0" loc="1033:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_CLK16_DIVIDE_1024" ref="0xb74ebcd0" loc="69:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="SRW11" ref="0xb77cd750" loc="708:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:25" name="ATM128_PINA" ref="0xb77e1980" loc="105:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="USBS1" ref="0xb77af270" loc="995:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PIND1" ref="0xb779b038" loc="1217:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINE3" ref="0xb7799730" loc="1245:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TWSTA" ref="0xb77d2ab0" loc="677:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TWIE" ref="0xb77cf1d0" loc="681:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:44" name="ATM128_TCNT1" ref="0xb77dc010" loc="149:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_SNGL_ADC0" ref="0xb7786838" loc="59:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_PRESCALE_2" ref="0xb7781dc0" loc="105:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDA7" ref="0xb77a56f0" loc="1111:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:31" name="CHANNEL_GND" ref="0xb777b0a8" loc="59:/opt/tinyos-main-2.1.2/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ISC60" ref="0xb77ca478" loc="743:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="REFS1" ref="0xb77a7ac0" loc="1091:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ATM128_ADC_DIFF_ADC00_200x" ref="0xb7785df0" loc="69:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXCIE0" ref="0xb77aaf20" loc="1061:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_ADC_PRESCALE_128" ref="0xb7780c98" loc="112:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="ATM128_ADC_DIFF_ADC71_1x" ref="0xb7783b00" loc="82:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:122" name="ATM128_TCCR1C" ref="0xb77d7360" loc="258:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCDR3" ref="0xb77b3220" loc="947:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PB2" ref="0xb77a3c30" loc="1136:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UPM01" ref="0xb77afb88" loc="1002:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:41" name="ATM128_OCR1BH" ref="0xb77dd780" loc="141:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PC4" ref="0xb77a0370" loc="1164:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PD6" ref="0xb779eac8" loc="1192:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="_POSIX_" ref="0xb7a6dea8" loc="352:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TOV2" ref="0xb77c17c8" loc="790:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PF1" ref="0xb7798880" loc="1257:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PG3" ref="0xb7796ac8" loc="1282:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ11" ref="0xb77af440" loc="996:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="INTF4" ref="0xb77c8e68" loc="772:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="ATM128_SPCR" ref="0xb77e2010" loc="69:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="XDIV4" ref="0xb77cc5b0" loc="720:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXC" ref="0xb77ae810" loc="1011:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TWEN" ref="0xb77cf010" loc="680:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:48" name="ATM128_ASSR" ref="0xb77dcaa0" loc="160:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_WAVE16_NORMAL" ref="0xb74ddb68" loc="212:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_POWER_SAVE" ref="0xb7788f10" loc="130:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="__codecvt_error" ref="0xb7a49d60" loc="180:/usr/include/libio.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDB1" ref="0xb77a2c60" loc="1147:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDC3" ref="0xb779f390" loc="1175:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDD5" ref="0xb779da70" loc="1203:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDE7" ref="0xb779a1e0" loc="1231:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="OCF1C" ref="0xb77bf818" loc="812:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="FOC3C" ref="0xb77b41d8" loc="934:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PD0" ref="0xb779d520" loc="1198:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCIE1B" ref="0xb77c2ec0" loc="783:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="SPR1" ref="0xb77b1c98" loc="979:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PE2" ref="0xb779bc30" loc="1226:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PF4" ref="0xb7798370" loc="1254:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:33" name="ATM128_WDTCR" ref="0xb77e0230" loc="119:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RXEN0" ref="0xb77a94a0" loc="1064:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CHANNEL_THERMISTOR" ref="0xb777c988" loc="56:/opt/tinyos-main-2.1.2/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_CLK16_NORMAL" ref="0xb74eb2f8" loc="65:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="UMSEL" ref="0xb77b0058" loc="983:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM20" ref="0xb77bb600" loc="857:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="XMBK" ref="0xb77cd920" loc="711:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXC1" ref="0xb77ad438" loc="1020:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ICF3" ref="0xb77c0f20" loc="807:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:57" name="ATM128_EIMSK" ref="0xb77da010" loc="188:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ENOMEM" ref="0xb7a1a6a8" loc="62:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:27" name="ATM128_PORTA" ref="0xb77e1db0" loc="111:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TWS6" ref="0xb77ce3a0" loc="695:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS22" ref="0xb77bb988" loc="859:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS10" ref="0xb77b69b8" loc="915:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ICNC3" ref="0xb77b6b90" loc="918:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ACIS0" ref="0xb77a8a80" loc="1078:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINA6" ref="0xb77a4730" loc="1122:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:120" name="ATM128_OCR1C" ref="0xb77d8ca8" loc="253:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="ATM128_ADC_DIFF_ADC32_10x" ref="0xb77844c8" loc="72:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:106" name="ATM128_EICRA" ref="0xb77d9998" loc="226:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="__codecvt_partial" ref="0xb7a49b90" loc="179:/usr/include/libio.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ACI" ref="0xb77a8370" loc="1074:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRE" ref="0xb77ae9d0" loc="1012:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PA6" ref="0xb77a6aa8" loc="1102:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:69" name="SERIAL_PROTO_PACKET_NOACK" ref="0xb7827058" loc="105:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="CHANNEL_BATTERY" ref="0xb777cc58" loc="57:/opt/tinyos-main-2.1.2/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDA2" ref="0xb77a4010" loc="1116:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDB4" ref="0xb77a2720" loc="1144:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDC6" ref="0xb77a0dc0" loc="1172:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ISC11" ref="0xb77cb7c8" loc="734:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINF7" ref="0xb7797aa8" loc="1271:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_WAVE16_PWM_10BIT" ref="0xb74db230" loc="215:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDF3" ref="0xb7797390" loc="1265:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_PRESCALE_2b" ref="0xb7780010" loc="106:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="XDIVEN" ref="0xb77cc058" loc="717:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOCA" ref="0xb77b5810" loc="927:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM01" ref="0xb77bc948" loc="848:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WGM13" ref="0xb77b62b0" loc="911:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COMB1" ref="0xb77ba9b0" loc="872:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ELAST" ref="0xb7a1aa50" loc="64:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UPE" ref="0xb77aeed8" loc="1015:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="IVSEL" ref="0xb77be5f8" loc="822:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:27" name="ATM128_ADC_DIFF_ADC32_1x" ref="0xb7782470" loc="86:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ACIC" ref="0xb77a86f0" loc="1076:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="AM_MY_MSG" ref="0xb7802590" loc="14:project.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ATM128_UCSR0A" ref="0xb77e3b50" loc="63:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:157" name="ATM128_UCSR1C" ref="0xb77d3010" loc="322:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_CLK16_DIVIDE_64" ref="0xb74eb7d0" loc="67:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TSM" ref="0xb77b2218" loc="960:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PUD" ref="0xb77b2750" loc="963:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DORD" ref="0xb77b1598" loc="975:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ADIF" ref="0xb77a71d0" loc="1084:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_START_CONVERSION_OFF" ref="0xb777f978" loc="127:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TXB8" ref="0xb77abec0" loc="1048:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="P_PID" ref="0xb7be7c78" loc="53:/usr/include/i386-linux-gnu/bits/waitflags.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:108" name="ATM128_XMCRB" ref="0xb77d9bb8" loc="229:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM3B0" ref="0xb77b8928" loc="893:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="JTRF" ref="0xb77beb38" loc="827:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="ATM128_PIND" ref="0xb77e2640" loc="78:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINB0" ref="0xb77a1c88" loc="1158:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="OCF2" ref="0xb77c1608" loc="789:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM0" ref="0xb77bd968" loc="837:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINC2" ref="0xb779e3c8" loc="1186:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PIND4" ref="0xb779cac0" loc="1214:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="UCSZ0" ref="0xb77b0928" loc="988:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINE6" ref="0xb77991d8" loc="1242:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_TIMER_COMPARE_CLEAR" ref="0xb74dfe60" loc="188:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SPMIE" ref="0xb77cad70" loc="750:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCDR1" ref="0xb77b35b0" loc="949:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_ADC_SNGL_ADC3" ref="0xb7786e50" loc="62:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PSR0" ref="0xb77b2910" loc="964:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WCOL" ref="0xb77b2e70" loc="969:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDD0" ref="0xb779c390" loc="1208:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDE2" ref="0xb779aaa0" loc="1236:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_WAVE16_PWM_9BIT" ref="0xb74db010" loc="214:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCIE3A" ref="0xb77c0618" loc="800:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="_ISOC_" ref="0xb7a6c058" loc="353:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ISC51" ref="0xb77ca640" loc="744:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="U2X0" ref="0xb77accf0" loc="1036:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:113" name="ATM128_TWSR" ref="0xb77d8458" loc="241:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="MUX2" ref="0xb77a63b8" loc="1096:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="OCDR6" ref="0xb77b4ca0" loc="944:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TXB80" ref="0xb77a9bc8" loc="1068:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PB5" ref="0xb77a3720" loc="1133:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PC7" ref="0xb77a1e48" loc="1161:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="ATM128_DDRC" ref="0xb77e2e90" loc="90:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:99" name="ATM128_PING" ref="0xb77daed0" loc="213:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="__codecvt_ok" ref="0xb7a499a8" loc="178:/usr/include/libio.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TWPS1" ref="0xb77ceaa8" loc="699:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXCIE" ref="0xb77ab270" loc="1041:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINA1" ref="0xb77a3038" loc="1127:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINB3" ref="0xb77a1730" loc="1155:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINC5" ref="0xb779fe38" loc="1183:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PIND7" ref="0xb779c568" loc="1211:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ02" ref="0xb77a9838" loc="1066:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PA1" ref="0xb77a5370" loc="1107:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WGMA0" ref="0xb77b92b0" loc="877:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGMB2" ref="0xb77b77c8" loc="903:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_CLK8_DIVIDE_256" ref="0xb74ec9c0" loc="59:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="INTF7" ref="0xb77c8910" loc="769:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TWA2" ref="0xb77cfaa0" loc="688:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CHANNEL_RSSI" ref="0xb777c698" loc="55:/opt/tinyos-main-2.1.2/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_ADC_PRESCALE_8" ref="0xb7780430" loc="108:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TCR0UB" ref="0xb77ba448" loc="867:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM1B0" ref="0xb77b9a00" loc="883:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="INT2" ref="0xb77c83b8" loc="764:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:133" name="ATM128_OCR3BH" ref="0xb77d6a90" loc="279:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ISC30" ref="0xb77cb270" loc="731:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ITIMER_PROF" ref="0xb7954968" loc="101:/usr/include/i386-linux-gnu/sys/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINF2" ref="0xb77963c8" loc="1276:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PING4" ref="0xb7795ab8" loc="1295:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_ADC_PRESCALE" ref="0xb7780ec0" loc="116:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WGM20" ref="0xb77bb270" loc="855:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM32" ref="0xb77b5100" loc="921:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:28" name="ATM128_ADC_DIFF_ADC42_1x" ref="0xb77826a0" loc="87:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADC_SNGL_ADC4" ref="0xb7785128" loc="63:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_WAVE16_PWM_CAPTURE_LOW" ref="0xb74dbdb0" loc="220:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:42" name="ATM128_OCR1AL" ref="0xb77ddbb8" loc="145:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS1" ref="0xb77bde88" loc="840:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TWINT" ref="0xb77d2728" loc="675:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_CLK16_DIVIDE_256" ref="0xb74eba48" loc="68:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32" name="ATM128_SFIOR" ref="0xb77e0010" loc="116:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TOS_SERIAL_CC1000_ID" ref="0xb7828308" loc="96:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADC" ref="0xb77e4848" loc="41:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="_IScntrl" ref="0xb7a64428" loc="57:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="FOC1B" ref="0xb77b4578" loc="938:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MPCM" ref="0xb77ad268" loc="1017:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PC1" ref="0xb77a0880" loc="1167:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WDP0" ref="0xb77b2058" loc="957:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PD3" ref="0xb779d010" loc="1195:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PE5" ref="0xb779b720" loc="1223:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PF7" ref="0xb7799e48" loc="1251:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_WAVE16_PWM_FAST_10BIT" ref="0xb74dbb50" loc="219:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ADPS1" ref="0xb77a7720" loc="1087:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TWA5" ref="0xb77cf560" loc="685:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TICIE1" ref="0xb77c2b20" loc="781:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="EXTRF" ref="0xb77bd0a8" loc="830:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UPM1" ref="0xb77b0218" loc="984:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ" ref="0xb77ab978" loc="1045:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_POWER_STANDBY" ref="0xb7787190" loc="131:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="BORF" ref="0xb77beeb8" loc="829:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:138" name="ATM128_TCCR3B" ref="0xb77d59b0" loc="292:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="RXB81" ref="0xb77aab78" loc="1057:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:18" name="ATM128_PORTD" ref="0xb77e2a70" loc="84:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINE1" ref="0xb7799ac0" loc="1247:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS01" ref="0xb77bccc8" loc="850:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PGERS" ref="0xb77c9740" loc="755:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="__codecvt_noconv" ref="0xb7a48010" loc="181:/usr/include/libio.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRIE1" ref="0xb77aa450" loc="1053:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ADEN" ref="0xb77a8c50" loc="1081:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_ADMUX" ref="0xb77e32c8" loc="51:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4096" name="_ISxdigit" ref="0xb7a67d40" loc="52:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDA5" ref="0xb77a5a70" loc="1113:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:34" name="TOS_AM_GROUP" ref="0xb782c1e0" loc="27:/opt/tinyos-main-2.1.2/tos/types/AM.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDB7" ref="0xb77a21e0" loc="1141:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ISC70" ref="0xb77ca0e8" loc="741:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDF6" ref="0xb7798dc0" loc="1262:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:137" name="ATM128_TCNT3H" ref="0xb77d5788" loc="289:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="AVR_CLOCK_OFF" ref="0xb74ea6e0" loc="76:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:68" name="SERIAL_PROTO_PACKET_ACK" ref="0xb7828db0" loc="104:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:47" name="ATM128_TCCR1A" ref="0xb77dc890" loc="157:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:63" name="ATM128_SREG" ref="0xb77da880" loc="202:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UPM11" ref="0xb77b0e98" loc="993:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:121" name="ATM128_OCR1CH" ref="0xb77d7138" loc="255:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FP_NORMAL" ref="0xb7a6d628" loc="223:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:512" name="_ISlower" ref="0xb7a685f8" loc="49:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_START_CONVERSION_ON" ref="0xb777fbe0" loc="128:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TOS_SERIAL_ACTIVE_MESSAGE_ID" ref="0xb78280a8" loc="95:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:101" name="ATM128_PORTG" ref="0xb77d9340" loc="219:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCF3B" ref="0xb77bf2c8" loc="809:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="SM1" ref="0xb77be0d0" loc="819:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PG1" ref="0xb7796e28" loc="1284:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TOV0" ref="0xb77c0268" loc="796:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="ATM128_UBRR0L" ref="0xb77e3700" loc="57:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="INTF2" ref="0xb77c2220" loc="774:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ECANCEL" ref="0xb7f179c8" loc="55:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="FP_SUBNORMAL" ref="0xb7a6d418" loc="220:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="COM3A1" ref="0xb77b83b8" loc="890:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="ATM128_SPDR" ref="0xb77e2430" loc="75:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="XDIV2" ref="0xb77cc940" loc="722:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_ADC_VREF_2_56" ref="0xb7787e58" loc="47:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_CLK8_DIVIDE_64" ref="0xb74ec4e0" loc="57:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DOR" ref="0xb77aed28" loc="1014:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UPE0" ref="0xb77acb30" loc="1035:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:19" name="ATM128_ADC_DIFF_ADC31_1x" ref="0xb7783240" loc="78:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="NOISE_HASHTABLE_SIZE" ref="0xb794c010" loc="59:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:132" name="ATM128_OCR3B" ref="0xb77d6660" loc="277:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="U2X" ref="0xb77ad0a8" loc="1016:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_TIMER_COMPARE_TOGGLE" ref="0xb74dfc20" loc="187:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_ADC_VREF_RSVD" ref="0xb7787bf8" loc="46:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDF0" ref="0xb77978d0" loc="1268:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDG2" ref="0xb7795560" loc="1290:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_ADC_DIFF_ADC00_10x" ref="0xb7785978" loc="67:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MPCM0" ref="0xb77aceb8" loc="1037:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SRW" ref="0xb77bfb88" loc="816:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ACD" ref="0xb77a9d88" loc="1071:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_CLK16_DIVIDE_8" ref="0xb74eb560" loc="66:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDC1" ref="0xb779f710" loc="1177:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDD3" ref="0xb779ddf0" loc="1205:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDE5" ref="0xb779a560" loc="1233:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCF1A" ref="0xb77c1b50" loc="792:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC3A" ref="0xb77b5d68" loc="932:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PE0" ref="0xb779a010" loc="1228:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PF2" ref="0xb77986d0" loc="1256:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:52" name="ATM128_MCUCSR" ref="0xb77db568" loc="173:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="USBS" ref="0xb77b0598" loc="986:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PG4" ref="0xb7796918" loc="1281:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="ATM128_WAVE16_PWM_COMPARE_LOW" ref="0xb74da030" loc="221:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:38" name="ATM128_ICR1L" ref="0xb77e0eb0" loc="135:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ENOACK" ref="0xb7a1a878" loc="63:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CSB2" ref="0xb77b7988" loc="904:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:195" name="SIM_LOG_OUTPUT_COUNT" ref="0xb79ce0c0" loc="64:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_log.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SPI2X" ref="0xb77b1058" loc="970:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_CLK16_EXTERNAL_FALL" ref="0xb74ea010" loc="70:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:126" name="HDLC_FLAG_BYTE" ref="0xb782aa18" loc="88:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CPHA" ref="0xb77b1ad8" loc="978:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ICF1" ref="0xb77c1988" loc="791:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DOR1" ref="0xb77adb30" loc="1024:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:97" name="ATM128_DDRF" ref="0xb77daaa0" loc="207:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TOIE2" ref="0xb77c2950" loc="780:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINF0" ref="0xb7796758" loc="1278:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PING2" ref="0xb7795e48" loc="1297:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_WAVE8_PWM" ref="0xb74e9100" loc="84:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="TWS4" ref="0xb77ce720" loc="697:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SRL2" ref="0xb77cee40" loc="703:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ERETRY" ref="0xb7a1a108" loc="59:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS20" ref="0xb77bbd08" loc="861:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ICNC1" ref="0xb77b7ee0" loc="909:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:42" name="ATM128_OCR1A" ref="0xb77dd9a0" loc="144:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS32" ref="0xb77b52c0" loc="922:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINA4" ref="0xb77a4ac0" loc="1124:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINB6" ref="0xb77a11d8" loc="1152:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PA4" ref="0xb77a6e08" loc="1104:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDA0" ref="0xb77a4390" loc="1118:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="COM1A1" ref="0xb77b9490" loc="880:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDB2" ref="0xb77a2aa0" loc="1146:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="INT5" ref="0xb77c9e58" loc="761:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDC4" ref="0xb779f1d0" loc="1174:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDD6" ref="0xb779d8b0" loc="1202:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:256" name="_ISupper" ref="0xb7a6adf8" loc="48:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ISC21" ref="0xb77cb438" loc="732:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINF5" ref="0xb7797e38" loc="1273:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="TWSTO" ref="0xb77d2c78" loc="678:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WGM11" ref="0xb77b8010" loc="886:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="XMM2" ref="0xb77cdae0" loc="712:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_ADC_SNGL_ADC7" ref="0xb7785740" loc="66:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="COMC1" ref="0xb77bad40" loc="874:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PSR321" ref="0xb77b2ae0" loc="965:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:124" name="ATM128_ETIFR" ref="0xb77d7580" loc="261:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:37" name="ATM128_TCCR2" ref="0xb77e0a90" loc="131:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRE0" ref="0xb77ac600" loc="1032:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:155" name="ATM128_UCSR1A" ref="0xb77d4b20" loc="316:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM1" ref="0xb77bdb28" loc="838:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="COM3C0" ref="0xb77b8cc8" loc="895:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SPIE" ref="0xb77b1228" loc="973:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FE1" ref="0xb77ad970" loc="1023:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:22" name="ATM128_PINB" ref="0xb77e1340" loc="96:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="SRW00" ref="0xb77cd588" loc="707:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCF0" ref="0xb77c00a8" loc="795:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC2" ref="0xb77bb0a8" loc="854:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINC0" ref="0xb779e758" loc="1188:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PIND2" ref="0xb779ce50" loc="1216:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINE4" ref="0xb7799568" loc="1244:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_VREF_OFF" ref="0xb7787790" loc="44:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FE" ref="0xb77aeb78" loc="1013:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="FP_INFINITE" ref="0xb7a6d010" loc="214:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_WAVE8_NORMAL" ref="0xb74eaea8" loc="83:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ACO" ref="0xb77a81c0" loc="1073:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_LEFT_ADJUST" ref="0xb77864b8" loc="53:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="AVR_CLOCK_ON" ref="0xb74ea8f0" loc="77:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_TIMER_COMPARE_NORMAL" ref="0xb74df9d8" loc="186:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-115" name="NOISE_MIN_QUANTIZE" ref="0xb794d010" loc="54:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="MSTR" ref="0xb77b1758" loc="976:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:29" name="ATM128_ADC_DIFF_ADC52_1x" ref="0xb77828d0" loc="88:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:36" name="ATM128_TCNT2" ref="0xb77e0870" loc="128:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_SNGL_ADC1" ref="0xb7786a40" loc="60:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:111" name="NOISE_NUM_VALUES" ref="0xb794c6b0" loc="61:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDE0" ref="0xb779ae20" loc="1238:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ISC61" ref="0xb77ca2b0" loc="742:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXCIE1" ref="0xb77aa0b0" loc="1051:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="INTF0" ref="0xb77c25b0" loc="776:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PORF" ref="0xb77bd268" loc="831:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="RXB8" ref="0xb77abd00" loc="1047:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_VREF_AVCC" ref="0xb77879f0" loc="45:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCDR4" ref="0xb77b3058" loc="946:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PB3" ref="0xb77a3a80" loc="1135:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PC5" ref="0xb77a01c0" loc="1163:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PD7" ref="0xb779e918" loc="1191:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOS_SERIAL_802_15_4_ID" ref="0xb7828578" loc="97:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2048" name="_ISdigit" ref="0xb7a67588" loc="51:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCR0UB" ref="0xb77ba278" loc="866:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_ADCH" ref="0xb77e4c48" loc="44:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOV3" ref="0xb77bf488" loc="810:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="UCSZ00" ref="0xb77ae2d0" loc="1006:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ12" ref="0xb77aa9b0" loc="1056:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:44" name="ATM128_TCNT1L" ref="0xb77dc228" loc="150:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="UMSEL0" ref="0xb77af9c0" loc="1001:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="INTF5" ref="0xb77c8ca0" loc="771:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TWA0" ref="0xb77cfe20" loc="690:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXC0" ref="0xb77ac438" loc="1031:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:104" name="ATM128_SPMCR" ref="0xb77d9560" loc="222:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_WAVE16_PWM_8BIT" ref="0xb74ddd80" loc="213:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="COM1C0" ref="0xb77b9da0" loc="885:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SUCCESS" ref="0xb7f17468" loc="52:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ESIZE" ref="0xb7f177f0" loc="54:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="XDIV5" ref="0xb77cc3e8" loc="719:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="INT0" ref="0xb77c8738" loc="766:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="IVCE" ref="0xb77be7b8" loc="823:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:131" name="ATM128_OCR3CH" ref="0xb77d6440" loc="274:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WGM30" ref="0xb77b70a8" loc="897:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_COMPARE_TOGGLE" ref="0xb74e9ac8" loc="92:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_INT_FLAG_ON" ref="0xb777e820" loc="140:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXCIE0" ref="0xb77a9108" loc="1062:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:65535" name="AM_BROADCAST_ADDR" ref="0xb782de40" loc="15:/opt/tinyos-main-2.1.2/tos/types/AM.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:22" name="ATM128_ADC_DIFF_ADC61_1x" ref="0xb77838d0" loc="81:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="FAIL" ref="0xb7f17628" loc="53:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PD1" ref="0xb779d370" loc="1197:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="OCIE1C" ref="0xb77c0d50" loc="804:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PE3" ref="0xb779ba80" loc="1225:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PF5" ref="0xb77981c0" loc="1253:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="_ISalnum" ref="0xb7a633c0" loc="59:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADCSRA" ref="0xb77e30a8" loc="48:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RXEN1" ref="0xb77aa618" loc="1054:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:34" name="ATM128_OCDR" ref="0xb77e0440" loc="122:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM21" ref="0xb77bb438" loc="856:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="EALREADY" ref="0xb7a1a4d8" loc="61:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="ATM128_ADC_DIFF_ADC41_1x" ref="0xb7783470" loc="79:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:31" name="ATM128_ADC_SNGL_GND" ref="0xb7782cd0" loc="90:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ACIS1" ref="0xb77a88b8" loc="1077:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:24" name="ATM128_PORTB" ref="0xb77e1770" loc="102:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TWS7" ref="0xb77ce1e0" loc="694:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS11" ref="0xb77b67f8" loc="914:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINA7" ref="0xb77a4568" loc="1121:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:114" name="ATM128_TWAR" ref="0xb77d8668" loc="244:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:58" name="ATM128_EICRB" ref="0xb77da230" loc="191:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PA7" ref="0xb77a68f8" loc="1101:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:54" name="ATM128_TIFR" ref="0xb77db998" loc="179:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="ATM128_ICR3" ref="0xb77d79b8" loc="267:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADC_PRESCALE_64" ref="0xb7780a78" loc="111:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDA3" ref="0xb77a5df0" loc="1115:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDB5" ref="0xb77a2560" loc="1143:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDC7" ref="0xb77a0c00" loc="1171:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ISC00" ref="0xb77cbd20" loc="737:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDF4" ref="0xb77971d0" loc="1264:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="FOCB" ref="0xb77b59d0" loc="928:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_CLK8_OFF" ref="0xb74f0ab8" loc="53:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TOS_AM_ADDRESS" ref="0xb782c410" loc="28:/opt/tinyos-main-2.1.2/tos/types/AM.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="COMA0" ref="0xb77ba7e8" loc="871:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ATM128_WAVE16_PWM_COMPARE_HIGH" ref="0xb74da500" loc="223:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC" ref="0xb77bd428" loc="834:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="UCPOL0" ref="0xb77ae4a0" loc="1007:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TXEN0" ref="0xb77a9668" loc="1065:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ATM128_UCSR0B" ref="0xb77e3928" loc="60:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:153" name="ATM128_UBRR1L" ref="0xb77d46d0" loc="310:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="ATM128_SPSR" ref="0xb77e2220" loc="72:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXC" ref="0xb77ae660" loc="1010:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_POWER_DOWN" ref="0xb77873d0" loc="132:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MUX0" ref="0xb77a6738" loc="1098:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ITIMER_REAL" ref="0xb7954518" loc="94:/usr/include/i386-linux-gnu/sys/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RXEN" ref="0xb77ab5f8" loc="1043:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM3B1" ref="0xb77b8758" loc="892:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="XDIV0" ref="0xb77cccd0" loc="724:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_PINE" ref="0xb77e4010" loc="30:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:26" name="ATM128_DDRA" ref="0xb77e1b90" loc="108:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TCN0UB" ref="0xb77ba0a8" loc="865:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINB1" ref="0xb77a1ac0" loc="1157:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM1" ref="0xb77bd7a8" loc="836:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINC3" ref="0xb779e200" loc="1185:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ1" ref="0xb77b0760" loc="987:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PIND5" ref="0xb779c8f8" loc="1213:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINE7" ref="0xb7799010" loc="1241:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TWEA" ref="0xb77d28e8" loc="676:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="ATM128_UDR0" ref="0xb77e3d60" loc="66:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDG0" ref="0xb77958e0" loc="1292:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="RWWSB" ref="0xb77c9010" loc="751:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TRUE" ref="0xb79ee208" loc="76:/opt/tinyos-main-2.1.2/tos/lib/tossim/tos.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDD1" ref="0xb779c1d0" loc="1207:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="NOISE_HISTORY" ref="0xb794daa8" loc="57:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="P_PGID" ref="0xb7be7e00" loc="54:/usr/include/i386-linux-gnu/bits/waitflags.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDE3" ref="0xb779a8e0" loc="1235:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:35" name="ATM128_OCR2" ref="0xb77e0650" loc="125:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="IDRD" ref="0xb77b4910" loc="942:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:104" name="ATM128_SPMCSR" ref="0xb77d9778" loc="223:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCIE3B" ref="0xb77c07e8" loc="801:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8192" name="_ISspace" ref="0xb7a66510" loc="53:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ISC40" ref="0xb77cab98" loc="747:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="U2X1" ref="0xb77adeb0" loc="1026:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CSB0" ref="0xb77b7d08" loc="906:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="UCPOL" ref="0xb77b0af0" loc="989:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="MUX3" ref="0xb77a61f8" loc="1095:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="NO_TASK" ref="0xb78003d8" loc="56:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="NUM_TASKS" ref="0xb7800200" loc="55:/opt/tinyos-main-2.1.2/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="stopDoneTask" ref="0xb765bb60" loc="101:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="sendDoneTask" ref="0xb765b248" loc="145:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="startDoneTask" ref="0xb75b9428" loc="96:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="MINDT" ref="0xb74a2380" loc="45:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:230" name="MAXT" ref="0xb74a2550" loc="46:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="fired" ref="0xb74ed970" loc="74:/opt/tinyos-main-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="AlarmToTimerC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="END_OF_LIST" ref="0xb73b7010" loc="56:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="updateFromTimer" ref="0xb73c0748" loc="71:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="NUM_TIMERS" ref="0xb73b8de8" loc="55:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="NUM_CLIENTS" ref="0xb7342940" loc="48:/opt/tinyos-main-2.1.2/tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="errorTask" ref="0xb7314ec0" loc="169:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="CancelTask" ref="0xb7341818" loc="126:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
  </constants>
  <functions>
  </functions>
  <typedefs>
    <typedef name="intptr_t" ref="0xb7cfc340" loc="125:/usr/include/stdint.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="intptr_t" ref="0xb7cfc340"/></typename>
      </type-int>
    </typedef>
    <typedef name="serial_packet_t" ref="0xb7824010" loc="134:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_packet" ref="0xb7825968"/>
        <typename><typedef-ref name="serial_packet_t" ref="0xb7824010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCCR3B_t" ref="0xb74d88c8" loc="247:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74d8010"/>
        <typename><typedef-ref name="Atm128_TCCR3B_t" ref="0xb74d88c8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="pthread_spinlock_t" ref="0xb7ba52a0" loc="234:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-qualified volatile="">
          <typename><typedef-ref name="pthread_spinlock_t" ref="0xb7ba52a0"/></typename>
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-qualified>
    </typedef>
    <typedef name="wchar_t" ref="0xb7f196d8" loc="324:/usr/lib/gcc/i686-linux-gnu/4.8/include/stddef.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="wchar_t" ref="0xb7f196d8"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128Admux_t" ref="0xb7781a38" loc="99:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb77817b0"/>
        <typename><typedef-ref name="Atm128Admux_t" ref="0xb7781a38"/></typename>
      </type-tag>
    </typedef>
    <typedef name="ushort" ref="0xb7bbc0a8" loc="151:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="ushort" ref="0xb7bbc0a8"/></typename>
      </type-int>
    </typedef>
    <typedef name="tossim_footer_t" ref="0xb782b688" loc="16:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimRadioMsg.h">
      <type-tag size="I:2" alignment="I:1"><nx_struct-ref name="tossim_footer" ref="0xb782b2d0"/>
        <typename><typedef-ref name="tossim_footer_t" ref="0xb782b688"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__int64_t" ref="0xb7be4a18" loc="46:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__int64_t" ref="0xb7be4a18"/></typename>
      </type-int>
    </typedef>
    <typedef name="__int16_t" ref="0xb7be4108" loc="38:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__int16_t" ref="0xb7be4108"/></typename>
      </type-int>
    </typedef>
    <typedef name="serial_header_t" ref="0xb7825760" loc="129:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0xb7826ce8"/>
        <typename><typedef-ref name="serial_header_t" ref="0xb7825760"/></typename>
      </type-tag>
    </typedef>
    <typedef name="TMilli" ref="0xb753a488" loc="42:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref ref="0xb753a2c0"/>
        <typename><typedef-ref name="TMilli" ref="0xb753a488"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__u_char" ref="0xb7be63c0" loc="30:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__u_char" ref="0xb7be63c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT0_t" ref="0xb74e6830" loc="111:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT0_t" ref="0xb74e6830"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1BL_t" ref="0xb74d4388" loc="278:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1BL_t" ref="0xb74d4388"/></typename>
      </type-int>
    </typedef>
    <typedef name="__intptr_t" ref="0xb7bdce00" loc="186:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__intptr_t" ref="0xb7bdce00"/></typename>
      </type-int>
    </typedef>
    <typedef name="__qaddr_t" ref="0xb7bdc9b8" loc="182:/usr/include/i386-linux-gnu/bits/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__quad_t" ref="0xb7be4f18"/></typename>
        </type-int>
        <typename><typedef-ref name="__qaddr_t" ref="0xb7bdc9b8"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="Atm128_OCR2_t" ref="0xb74e52c0" loc="116:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR2_t" ref="0xb74e52c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="fd_set" ref="0xb7bb8a58" loc="75:/usr/include/i386-linux-gnu/sys/select.h">
      <type-tag size="I:128" alignment="I:4"><struct-ref ref="0xb7bb8890"/>
        <typename><typedef-ref name="fd_set" ref="0xb7bb8a58"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sim_time_t" ref="0xb79ee748" loc="51:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_tossim.h">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_tossim.h">
        <short>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0xb79ee748"/></typename>
      </type-int>
    </typedef>
    <typedef name="__caddr_t" ref="0xb7bdcbe0" loc="183:/usr/include/i386-linux-gnu/bits/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        <typename><typedef-ref name="__caddr_t" ref="0xb7bdcbe0"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__time_t" ref="0xb7be0a28" loc="139:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__time_t" ref="0xb7be0a28"/></typename>
      </type-int>
    </typedef>
    <typedef name="__ssize_t" ref="0xb7bddf28" loc="172:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__ssize_t" ref="0xb7bddf28"/></typename>
      </type-int>
    </typedef>
    <typedef name="float_t" ref="0xb7b5f870" loc="35:/usr/include/i386-linux-gnu/bits/mathdef.h">
      <type-float cname="long double" size="I:12" alignment="I:4">
        <typename><typedef-ref name="float_t" ref="0xb7b5f870"/></typename>
      </type-float>
    </typedef>
    <typedef name="mode_t" ref="0xb7bc1b60" loc="70:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="mode_t" ref="0xb7bc1b60"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCCR1C_t" ref="0xb74d7b88" loc="262:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74d7630"/>
        <typename><typedef-ref name="Atm128_TCCR1C_t" ref="0xb74d7b88"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_IO_lock_t" ref="0xb7a4beb0" loc="150:/usr/include/libio.h">
      <type-void size="I:1" alignment="I:1">
        <typename><typedef-ref name="_IO_lock_t" ref="0xb7a4beb0"/></typename>
      </type-void>
    </typedef>
    <typedef name="int_least32_t" ref="0xb7cff048" loc="67:/usr/include/stdint.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int_least32_t" ref="0xb7cff048"/></typename>
      </type-int>
    </typedef>
    <typedef name="__builtin_va_list" ref="0xb7f1c028"  loc="NONE">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="V:" alignment="V:"><struct-ref ref="0xb7f23f48"/></type-tag>
      </type-pointer>
    </typedef>
    <typedef name="__uint32_t" ref="0xb7be47b0" loc="41:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__uint32_t" ref="0xb7be47b0"/></typename>
      </type-int>
    </typedef>
    <typedef name="TMicro" ref="0xb753ad08" loc="44:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref ref="0xb753ab40"/>
        <typename><typedef-ref name="TMicro" ref="0xb753ad08"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__fsword_t" ref="0xb7bddd00" loc="170:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__fsword_t" ref="0xb7bddd00"/></typename>
      </type-int>
    </typedef>
    <typedef name="__fsfilcnt_t" ref="0xb7bdd800" loc="166:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__fsfilcnt_t" ref="0xb7bdd800"/></typename>
      </type-int>
    </typedef>
    <typedef name="nlink_t" ref="0xb7bc1db0" loc="75:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="nlink_t" ref="0xb7bc1db0"/></typename>
      </type-int>
    </typedef>
    <typedef name="clock_t" ref="0xb7bbf2c0" loc="59:/usr/include/time.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="clock_t" ref="0xb7bbf2c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1BH_t" ref="0xb74d4100" loc="277:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1BH_t" ref="0xb74d4100"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_condattr_t" ref="0xb7ba96d0" loc="160:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-tag size="I:4" alignment="I:4"><union-ref ref="0xb7ba94a8"/>
        <typename><typedef-ref name="pthread_condattr_t" ref="0xb7ba96d0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="heap_t" ref="0xb7996b28" loc="65:/opt/tinyos-main-2.1.2/tos/lib/tossim/heap.h">
      <documentation loc="53:/opt/tinyos-main-2.1.2/tos/lib/tossim/heap.h">
        <short>&#10; </short>
        <long>&#10; @author Philip Levis&#10;</long>
      </documentation>
      <type-tag size="I:12" alignment="I:4"><struct-ref name="heap" ref="0xb7996570"/>
        <typename><typedef-ref name="heap_t" ref="0xb7996b28"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__gid_t" ref="0xb7be28f8" loc="126:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__gid_t" ref="0xb7be28f8"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_uint16_t" ref="0xb7c14018" loc="446:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nxle_uint16_t">
        <typename><typedef-ref name="nxle_uint16_t" ref="0xb7c14018"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_log_channel_t" ref="0xb79d0a10" loc="61:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_log.c">
      <type-tag size="I:16" alignment="I:4"><struct-ref name="sim_log_channel" ref="0xb79d0228"/>
        <typename><typedef-ref name="sim_log_channel_t" ref="0xb79d0a10"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_int" ref="0xb7bc3728" loc="35:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="u_int" ref="0xb7bc3728"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_once_t" ref="0xb7ba9b78" loc="168:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="pthread_once_t" ref="0xb7ba9b78"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint" ref="0xb7bbc2a0" loc="152:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint" ref="0xb7bbc2a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="am_group_t" ref="0xb782d8a0" loc="11:/opt/tinyos-main-2.1.2/tos/types/AM.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="am_group_t" ref="0xb782d8a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCCR3C_t" ref="0xb74d7eb8" loc="265:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74d7630"/>
        <typename><typedef-ref name="Atm128_TCCR3C_t" ref="0xb74d7eb8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uint_least8_t" ref="0xb7cff548" loc="76:/usr/include/stdint.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint_least8_t" ref="0xb7cff548"/></typename>
      </type-int>
    </typedef>
    <typedef name="__fsid_t" ref="0xb7be1e50" loc="134:/usr/include/i386-linux-gnu/bits/types.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0xb7be1c88"/>
        <typename><typedef-ref name="__fsid_t" ref="0xb7be1e50"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCNT1H_t" ref="0xb74d6188" loc="269:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT1H_t" ref="0xb74d6188"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT3L_t" ref="0xb74d6920" loc="272:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT3L_t" ref="0xb74d6920"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast32_t" ref="0xb7cfde48" loc="110:/usr/include/stdint.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint_fast32_t" ref="0xb7cfde48"/></typename>
      </type-int>
    </typedef>
    <typedef name="blksize_t" ref="0xb7bb2c68" loc="228:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="blksize_t" ref="0xb7bb2c68"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_least64_t" ref="0xb7cff2c8" loc="72:/usr/include/stdint.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int_least64_t" ref="0xb7cff2c8"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ETIFR_t" ref="0xb74cfd38" loc="324:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74cfb10"/>
        <typename><typedef-ref name="Atm128_ETIFR_t" ref="0xb74cfd38"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__pid_t" ref="0xb7be1950" loc="133:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__pid_t" ref="0xb7be1950"/></typename>
      </type-int>
    </typedef>
    <typedef name="__u_int" ref="0xb7be6818" loc="32:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__u_int" ref="0xb7be6818"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT2_t" ref="0xb74e5048" loc="115:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT2_t" ref="0xb74e5048"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1AL_t" ref="0xb74d6e40" loc="276:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1AL_t" ref="0xb74d6e40"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_event_t" ref="0xb79e8820" loc="51:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_event_queue.h">
      <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0xb79e85b8"/>
        <typename><typedef-ref name="sim_event_t" ref="0xb79e8820"/></typename>
      </type-tag>
    </typedef>
    <typedef name="error_t" ref="0xb7953340" loc="67:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="error_t" ref="0xb7953340"/></typename>
      </type-int>
    </typedef>
    <typedef name="__sig_atomic_t" ref="0xb7bbb688" loc="22:/usr/include/i386-linux-gnu/bits/sigset.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__sig_atomic_t" ref="0xb7bbb688"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_SFIOR_t" ref="0xb74df618" loc="178:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74df3f0"/>
        <typename><typedef-ref name="Atm128_SFIOR_t" ref="0xb74df618"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__daddr_t" ref="0xb7bde158" loc="143:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__daddr_t" ref="0xb7bde158"/></typename>
      </type-int>
    </typedef>
    <typedef name="__ino_t" ref="0xb7be2b48" loc="127:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__ino_t" ref="0xb7be2b48"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_least8_t" ref="0xb7d00ba8" loc="65:/usr/include/stdint.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="int_least8_t" ref="0xb7d00ba8"/></typename>
      </type-int>
    </typedef>
    <typedef name="FILE" ref="0xb7a4f9b0" loc="48:/usr/include/stdio.h">
      <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0xb7a4f770"/>
        <typename><typedef-ref name="FILE" ref="0xb7a4f9b0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__compar_fn_t" ref="0xb7b79750" loc="741:/usr/include/stdlib.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <typename><typedef-ref name="__compar_fn_t" ref="0xb7b79750"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__locale_t" ref="0xb7c056b8" loc="39:/usr/include/xlocale.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:116" alignment="I:4"><struct-ref name="__locale_struct" ref="0xb7c06838"/></type-tag>
        <typename><typedef-ref name="__locale_t" ref="0xb7c056b8"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="Atm128_ADCL_t" ref="0xb777c2c0" loc="161:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ADCL_t" ref="0xb777c2c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__mode_t" ref="0xb7be1048" loc="129:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__mode_t" ref="0xb7be1048"/></typename>
      </type-int>
    </typedef>
    <typedef name="locale_t" ref="0xb7c05930" loc="42:/usr/include/xlocale.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:116" alignment="I:4"><struct-ref name="__locale_struct" ref="0xb7c06838"/></type-tag>
        <typename><typedef-ref name="locale_t" ref="0xb7c05930"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="radio_stats_t" ref="0xb7826ae0" loc="121:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-tag size="I:18" alignment="I:2"><struct-ref name="radio_stats" ref="0xb78274f8"/>
        <typename><typedef-ref name="radio_stats_t" ref="0xb7826ae0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="clockid_t" ref="0xb7bbf828" loc="91:/usr/include/time.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="clockid_t" ref="0xb7bbf828"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ICR1H_t" ref="0xb74d3a90" loc="291:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ICR1H_t" ref="0xb74d3a90"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ICR3L_t" ref="0xb74d2290" loc="294:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ICR3L_t" ref="0xb74d2290"/></typename>
      </type-int>
    </typedef>
    <typedef name="gid_t" ref="0xb7bc1920" loc="65:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="gid_t" ref="0xb7bc1920"/></typename>
      </type-int>
    </typedef>
    <typedef name="fsid_t" ref="0xb7bc1068" loc="39:/usr/include/i386-linux-gnu/sys/types.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0xb7be1c88"/>
        <typename><typedef-ref name="fsid_t" ref="0xb7bc1068"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sim_packet_t" ref="0xb7837990" loc="59:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_packet.h">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_packet.h">
        <short>&#10;&#10; TOSSIM packet abstract data type, so C++ code can call into nesC&#10; code that does the native-to-network type translation.</short>
        <long>&#10;&#10; TOSSIM packet abstract data type, so C++ code can call into nesC&#10; code that does the native-to-network type translation.&#10;&#10; @author Philip Levis&#10; @date   Jan 2 2006&#10;</long>
      </documentation>
      <type-tag size="I:0" alignment="I:1"><struct-ref name="sim_packet" ref="0xb78377a8"/>
        <typename><typedef-ref name="sim_packet_t" ref="0xb7837990"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128Adcsra_t" ref="0xb777dd90" loc="158:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-tag size="I:1" alignment="I:1"><struct-ref ref="0xb777d9e8"/>
        <typename><typedef-ref name="Atm128Adcsra_t" ref="0xb777dd90"/></typename>
      </type-tag>
    </typedef>
    <typedef name="int8_t" ref="0xb7f118f8" loc="36:/usr/include/stdint.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="int8_t" ref="0xb7f118f8"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_log_output_t" ref="0xb79d0010" loc="54:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_log.c">
      <type-tag size="I:8" alignment="I:4"><struct-ref name="sim_log_output" ref="0xb79d1ab8"/>
        <typename><typedef-ref name="sim_log_output_t" ref="0xb79d0010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="suseconds_t" ref="0xb7bbaf28" loc="48:/usr/include/i386-linux-gnu/sys/select.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="suseconds_t" ref="0xb7bbaf28"/></typename>
      </type-int>
    </typedef>
    <typedef name="sigset_t" ref="0xb7bba0e0" loc="37:/usr/include/i386-linux-gnu/sys/select.h">
      <type-tag size="I:128" alignment="I:4"><struct-ref ref="0xb7bbbc78"/>
        <typename><typedef-ref name="sigset_t" ref="0xb7bba0e0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="T32khz" ref="0xb753a8c8" loc="43:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref ref="0xb753a700"/>
        <typename><typedef-ref name="T32khz" ref="0xb753a8c8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_short" ref="0xb7bc3500" loc="34:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="u_short" ref="0xb7bc3500"/></typename>
      </type-int>
    </typedef>
    <typedef name="tossim_header_t" ref="0xb782b0c8" loc="12:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimRadioMsg.h">
      <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="tossim_header" ref="0xb782c638"/>
        <typename><typedef-ref name="tossim_header_t" ref="0xb782b0c8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="ptrdiff_t" ref="0xb7f19250" loc="147:/usr/lib/gcc/i686-linux-gnu/4.8/include/stddef.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="ptrdiff_t" ref="0xb7f19250"/></typename>
      </type-int>
    </typedef>
    <typedef name="blkcnt_t" ref="0xb7bb2ee0" loc="235:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="blkcnt_t" ref="0xb7bb2ee0"/></typename>
      </type-int>
    </typedef>
    <typedef name="TSecond" ref="0xb753a048" loc="41:/opt/tinyos-main-2.1.2/tos/lib/timer/Timer.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref ref="0xb753be50"/>
        <typename><typedef-ref name="TSecond" ref="0xb753a048"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uint32_t" ref="0xb7d006b0" loc="51:/usr/include/stdint.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0xb7d006b0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_uint64_t" ref="0xb7c14968" loc="448:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:1" network="nxle_uint64_t">
        <typename><typedef-ref name="nxle_uint64_t" ref="0xb7c14968"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_uint8_t" ref="0xb7c19728" loc="435:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
        <typename><typedef-ref name="nx_uint8_t" ref="0xb7c19728"/></typename>
      </type-int>
    </typedef>
    <typedef name="uintptr_t" ref="0xb7cfc568" loc="128:/usr/include/stdint.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uintptr_t" ref="0xb7cfc568"/></typename>
      </type-int>
    </typedef>
    <typedef name="caddr_t" ref="0xb7bc0d68" loc="116:/usr/include/i386-linux-gnu/sys/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        <typename><typedef-ref name="caddr_t" ref="0xb7bc0d68"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__u_long" ref="0xb7be6a58" loc="33:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__u_long" ref="0xb7be6a58"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast64_t" ref="0xb7cfc110" loc="112:/usr/include/stdint.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint_fast64_t" ref="0xb7cfc110"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT3H_t" ref="0xb74d6698" loc="271:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT3H_t" ref="0xb74d6698"/></typename>
      </type-int>
    </typedef>
    <typedef name="__uint16_t" ref="0xb7be4358" loc="39:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__uint16_t" ref="0xb7be4358"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_char" ref="0xb7bc32b0" loc="33:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="u_char" ref="0xb7bc32b0"/></typename>
      </type-int>
    </typedef>
    <typedef name="mcu_power_t" ref="0xb778a5e0" loc="120:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="mcu_power_t" ref="0xb778a5e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast16_t" ref="0xb7cfd290" loc="96:/usr/include/stdint.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int_fast16_t" ref="0xb7cfd290"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1AH_t" ref="0xb74d6bb8" loc="275:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1AH_t" ref="0xb74d6bb8"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1CL_t" ref="0xb74d4898" loc="280:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1CL_t" ref="0xb74d4898"/></typename>
      </type-int>
    </typedef>
    <typedef name="fpos_t" ref="0xb7a33068" loc="110:/usr/include/stdio.h">
      <type-tag size="I:12" alignment="I:4"><struct-ref ref="0xb7a4cd28"/>
        <typename><typedef-ref name="fpos_t" ref="0xb7a33068"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCCR1B_t" ref="0xb74d8580" loc="244:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74d8010"/>
        <typename><typedef-ref name="Atm128_TCCR1B_t" ref="0xb74d8580"/></typename>
      </type-tag>
    </typedef>
    <typedef name="div_t" ref="0xb7bd4128" loc="101:/usr/include/stdlib.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0xb7bd6eb8"/>
        <typename><typedef-ref name="div_t" ref="0xb7bd4128"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sim_gain_noise_t" ref="0xb78fc5d0" loc="6:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_gain.c">
      <type-tag size="I:16" alignment="I:4"><struct-ref name="sim_gain_noise" ref="0xb78fc148"/>
        <typename><typedef-ref name="sim_gain_noise_t" ref="0xb78fc5d0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="size_t" ref="0xb7f19488" loc="212:/usr/lib/gcc/i686-linux-gnu/4.8/include/stddef.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="size_t" ref="0xb7f19488"/></typename>
      </type-int>
    </typedef>
    <typedef name="__uint8_t" ref="0xb7be6eb0" loc="37:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__uint8_t" ref="0xb7be6eb0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__sigset_t" ref="0xb7bbbe40" loc="30:/usr/include/i386-linux-gnu/bits/sigset.h">
      <type-tag size="I:128" alignment="I:4"><struct-ref ref="0xb7bbbc78"/>
        <typename><typedef-ref name="__sigset_t" ref="0xb7bbbe40"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCCR0_t" ref="0xb74e65b0" loc="110:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e8e40"/>
        <typename><typedef-ref name="Atm128_TCCR0_t" ref="0xb74e65b0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__loff_t" ref="0xb7bdc738" loc="181:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__loff_t" ref="0xb7bdc738"/></typename>
      </type-int>
    </typedef>
    <typedef name="__ino64_t" ref="0xb7be2dd8" loc="128:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__ino64_t" ref="0xb7be2dd8"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_am_id_t" ref="0xb782fdc0" loc="6:/opt/tinyos-main-2.1.2/tos/types/AM.h">
      <documentation loc="34:/opt/tinyos-main-2.1.2/tos/lib/tossim/platform_message.h">
        <short>&#10; Defining the platform-independently named packet structures to be the&#10; tossim structures.</short>
        <long>&#10; Defining the platform-independently named packet structures to be the&#10; tossim structures.&#10;&#10; @author Philip Levis&#10; @date   Dec 2 2005&#10; Revision:  $Revision: 1.5 $&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
        <typename><typedef-ref name="nx_am_id_t" ref="0xb782fdc0"/></typename>
      </type-int>
    </typedef>
    <typedef name="message_header_t" ref="0xb7824db8" loc="53:/opt/tinyos-main-2.1.2/tos/lib/tossim/platform_message.h">
      <type-tag size="I:7" alignment="I:1"><union-ref name="message_header" ref="0xb78247e8"/>
        <typename><typedef-ref name="message_header_t" ref="0xb7824db8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="gain_entry_t" ref="0xb7903400" loc="57:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_gain.h">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_gain.h">
        <short>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.</short>
        <long>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-tag size="I:16" alignment="I:4"><struct-ref name="gain_entry" ref="0xb7904d60"/>
        <typename><typedef-ref name="gain_entry_t" ref="0xb7903400"/></typename>
      </type-tag>
    </typedef>
    <typedef name="am_addr_t" ref="0xb782db00" loc="12:/opt/tinyos-main-2.1.2/tos/types/AM.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="am_addr_t" ref="0xb782db00"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_int32_t" ref="0xb7c1ae50" loc="433:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="int" size="I:4" alignment="I:1" network="nx_int32_t">
        <typename><typedef-ref name="nx_int32_t" ref="0xb7c1ae50"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ADCH_t" ref="0xb777c048" loc="160:/opt/tinyos-main-2.1.2/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ADCH_t" ref="0xb777c048"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_least16_t" ref="0xb7cff8c0" loc="77:/usr/include/stdint.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint_least16_t" ref="0xb7cff8c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__io_close_fn" ref="0xb7a3f6e0" loc="353:/usr/include/libio.h">
      <type-function size="I:1" alignment="I:1">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        <function-parameters>
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
        </function-parameters>
        <typename><typedef-ref name="__io_close_fn" ref="0xb7a3f6e0"/></typename>
      </type-function>
    </typedef>
    <typedef name="uint8_t" ref="0xb7d00250" loc="48:/usr/include/stdint.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0xb7d00250"/></typename>
      </type-int>
    </typedef>
    <typedef name="time_t" ref="0xb7bbf560" loc="75:/usr/include/time.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="time_t" ref="0xb7bbf560"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_int8_t" ref="0xb7c17918" loc="441:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="signed char" size="I:1" alignment="I:1" network="nxle_int8_t">
        <typename><typedef-ref name="nxle_int8_t" ref="0xb7c17918"/></typename>
      </type-int>
    </typedef>
    <typedef name="lldiv_t" ref="0xb7bd4d20" loc="121:/usr/include/stdlib.h">
      <type-tag size="I:16" alignment="I:4"><struct-ref ref="0xb7bd4af8"/>
        <typename><typedef-ref name="lldiv_t" ref="0xb7bd4d20"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_IO_FILE" ref="0xb7a44998" loc="310:/usr/include/libio.h">
      <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0xb7a4f770"/>
        <typename><typedef-ref name="_IO_FILE" ref="0xb7a44998"/></typename>
      </type-tag>
    </typedef>
    <typedef name="pthread_attr_t" ref="0xb7bb0f20" loc="69:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-tag size="I:36" alignment="I:4"><union-ref name="pthread_attr_t" ref="0xb7bb08a8"/>
        <typename><typedef-ref name="pthread_attr_t" ref="0xb7bb0f20"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__io_seek_fn" ref="0xb7a3f178" loc="350:/usr/include/libio.h">
      <type-function size="I:1" alignment="I:1">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        <function-parameters>
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <type-pointer size="I:4" alignment="I:4">
            <type-int cname="long long" size="I:8" alignment="I:8">
              <typename><typedef-ref name="__off64_t" ref="0xb7be1740"/></typename>
            </type-int>
          </type-pointer>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </function-parameters>
        <typename><typedef-ref name="__io_seek_fn" ref="0xb7a3f178"/></typename>
      </type-function>
    </typedef>
    <typedef name="pid_t" ref="0xb7bc0460" loc="98:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="pid_t" ref="0xb7bc0460"/></typename>
      </type-int>
    </typedef>
    <typedef name="timer_t" ref="0xb7bbfaa8" loc="103:/usr/include/time.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-void size="I:1" alignment="I:1"></type-void>
        <typename><typedef-ref name="timer_t" ref="0xb7bbfaa8"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="pthread_rwlockattr_t" ref="0xb7ba5010" loc="228:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-tag size="I:8" alignment="I:4"><union-ref ref="0xb7ba7d28"/>
        <typename><typedef-ref name="pthread_rwlockattr_t" ref="0xb7ba5010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_OCR0_t" ref="0xb74e6aa8" loc="112:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR0_t" ref="0xb74e6aa8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__uint64_t" ref="0xb7be4ca8" loc="47:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__uint64_t" ref="0xb7be4ca8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__dev_t" ref="0xb7be2498" loc="124:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__dev_t" ref="0xb7be2498"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_int32_t" ref="0xb7c16258" loc="443:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="int" size="I:4" alignment="I:1" network="nxle_int32_t">
        <typename><typedef-ref name="nxle_int32_t" ref="0xb7c16258"/></typename>
      </type-int>
    </typedef>
    <typedef name="Msg_t" ref="0xb7802290" loc="11:project.h">
      <type-tag size="I:5" alignment="I:1"><nx_struct-ref name="Msg" ref="0xb7aa4ba8"/>
        <typename><typedef-ref name="Msg_t" ref="0xb7802290"/></typename>
      </type-tag>
    </typedef>
    <typedef name="va_list" ref="0xb7a34dd0" loc="79:/usr/include/stdio.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="V:" alignment="V:"><struct-ref ref="0xb7f23f48"/></type-tag>
        <typename><typedef-ref name="va_list" ref="0xb7a34dd0"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__off_t" ref="0xb7be14c0" loc="131:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__off_t" ref="0xb7be14c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast8_t" ref="0xb7cfd068" loc="90:/usr/include/stdint.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="int_fast8_t" ref="0xb7cfd068"/></typename>
      </type-int>
    </typedef>
    <typedef name="__blkcnt_t" ref="0xb7bdece0" loc="158:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__blkcnt_t" ref="0xb7bdece0"/></typename>
      </type-int>
    </typedef>
    <typedef name="tossim_metadata_t" ref="0xb782a3e8" loc="22:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimRadioMsg.h">
      <type-tag size="I:4" alignment="I:1"><nx_struct-ref name="tossim_metadata" ref="0xb782b8a0"/>
        <typename><typedef-ref name="tossim_metadata_t" ref="0xb782a3e8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__syscall_ulong_t" ref="0xb7bdc4a8" loc="177:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__syscall_ulong_t" ref="0xb7bdc4a8"/></typename>
      </type-int>
    </typedef>
    <typedef name="am_id_t" ref="0xb782d648" loc="10:/opt/tinyos-main-2.1.2/tos/types/AM.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="am_id_t" ref="0xb782d648"/></typename>
      </type-int>
    </typedef>
    <typedef name="intmax_t" ref="0xb7cfc7c8" loc="138:/usr/include/stdint.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="intmax_t" ref="0xb7cfc7c8"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128TimerCtrlCapture_t" ref="0xb74d8238" loc="241:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74d8010"/>
        <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0xb74d8238"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCCR2_t" ref="0xb74e6db0" loc="114:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e8e40"/>
        <typename><typedef-ref name="Atm128_TCCR2_t" ref="0xb74e6db0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="serial_metadata_t" ref="0xb78245d8" loc="138:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <type-tag size="I:1" alignment="I:1"><nx_struct-ref name="serial_metadata" ref="0xb7824228"/>
        <typename><typedef-ref name="serial_metadata_t" ref="0xb78245d8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__fsblkcnt_t" ref="0xb7bdd2a8" loc="162:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__fsblkcnt_t" ref="0xb7bdd2a8"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint16_t" ref="0xb7d00490" loc="49:/usr/include/stdint.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0xb7d00490"/></typename>
      </type-int>
    </typedef>
    <typedef name="_G_fpos_t" ref="0xb7a4b010" loc="25:/usr/include/_G_config.h">
      <type-tag size="I:12" alignment="I:4"><struct-ref ref="0xb7a4cd28"/>
        <typename><typedef-ref name="_G_fpos_t" ref="0xb7a4b010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_int8_t" ref="0xb7bbc608" loc="200:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="u_int8_t" ref="0xb7bbc608"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT1L_t" ref="0xb74d6410" loc="270:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT1L_t" ref="0xb74d6410"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR3CH_t" ref="0xb74d3578" loc="287:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3CH_t" ref="0xb74d3578"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_am_group_t" ref="0xb782d178" loc="7:/opt/tinyos-main-2.1.2/tos/types/AM.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
        <typename><typedef-ref name="nx_am_group_t" ref="0xb782d178"/></typename>
      </type-int>
    </typedef>
    <typedef name="__timer_t" ref="0xb7bde808" loc="150:/usr/include/i386-linux-gnu/bits/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-void size="I:1" alignment="I:1"></type-void>
        <typename><typedef-ref name="__timer_t" ref="0xb7bde808"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="message_metadata_t" ref="0xb7822a50" loc="61:/opt/tinyos-main-2.1.2/tos/lib/tossim/platform_message.h">
      <type-tag size="I:4" alignment="I:1"><union-ref name="message_metadata" ref="0xb7822630"/>
        <typename><typedef-ref name="message_metadata_t" ref="0xb7822a50"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__io_write_fn" ref="0xb7a41800" loc="341:/usr/include/libio.h">
      <type-function size="I:1" alignment="I:1">
        <type-int cname="int" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__ssize_t" ref="0xb7bddf28"/></typename>
        </type-int>
        <function-parameters>
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <type-pointer size="I:4" alignment="I:4">
            <type-qualified const="">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-qualified>
          </type-pointer>
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="size_t" ref="0xb7f19488"/></typename>
          </type-int>
        </function-parameters>
        <typename><typedef-ref name="__io_write_fn" ref="0xb7a41800"/></typename>
      </type-function>
    </typedef>
    <typedef name="fd_mask" ref="0xb7bb8cc8" loc="82:/usr/include/i386-linux-gnu/sys/select.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="fd_mask" ref="0xb7bb8cc8"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_uint32_t" ref="0xb7c17030" loc="437:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
        <typename><typedef-ref name="nx_uint32_t" ref="0xb7c17030"/></typename>
      </type-int>
    </typedef>
    <typedef name="hashtable_t" ref="0xb79d8ef8" loc="10:/opt/tinyos-main-2.1.2/tos/lib/tossim/hashtable.h">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_log.h">
        <short>&#10; The TOSSIM logging system.</short>
        <long>&#10; The TOSSIM logging system. Unlike in TinyOS 1.x, this logging&#10; system supports an arbitrary number of channels, denoted by&#10; a string identifier. A channel can be connected to any number&#10; of outputs, and a debug statement can be associated with any&#10; number of channels.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0xb79d8c90"/>
        <typename><typedef-ref name="hashtable_t" ref="0xb79d8ef8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="dev_t" ref="0xb7bc16f8" loc="60:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="dev_t" ref="0xb7bc16f8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__u_quad_t" ref="0xb7be21c0" loc="56:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__u_quad_t" ref="0xb7be21c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_int32_t" ref="0xb7bbcca8" loc="202:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="u_int32_t" ref="0xb7bbcca8"/></typename>
      </type-int>
    </typedef>
    <typedef name="fsfilcnt_t" ref="0xb7bb0420" loc="243:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="fsfilcnt_t" ref="0xb7bb0420"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast8_t" ref="0xb7cfd9a8" loc="103:/usr/include/stdint.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint_fast8_t" ref="0xb7cfd9a8"/></typename>
      </type-int>
    </typedef>
    <typedef name="idtype_t" ref="0xb7be6010" loc="55:/usr/include/i386-linux-gnu/bits/waitflags.h">
      <type-tag size="I:4" alignment="I:4"><enum-ref ref="0xb7be79f8"/>
        <typename><typedef-ref name="idtype_t" ref="0xb7be6010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__rlim64_t" ref="0xb7be05c0" loc="137:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__rlim64_t" ref="0xb7be05c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__key_t" ref="0xb7bde368" loc="144:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__key_t" ref="0xb7bde368"/></typename>
      </type-int>
    </typedef>
    <typedef name="__useconds_t" ref="0xb7be0c90" loc="140:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__useconds_t" ref="0xb7be0c90"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128Assr_t" ref="0xb74e4428" loc="130:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e4200"/>
        <typename><typedef-ref name="Atm128Assr_t" ref="0xb74e4428"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_OCR3BL_t" ref="0xb74d32f0" loc="286:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3BL_t" ref="0xb74d32f0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__io_read_fn" ref="0xb7a42e08" loc="333:/usr/include/libio.h">
      <type-function size="I:1" alignment="I:1">
        <type-int cname="int" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__ssize_t" ref="0xb7bddf28"/></typename>
        </type-int>
        <function-parameters>
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <type-pointer size="I:4" alignment="I:4">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="size_t" ref="0xb7f19488"/></typename>
          </type-int>
        </function-parameters>
        <typename><typedef-ref name="__io_read_fn" ref="0xb7a42e08"/></typename>
      </type-function>
    </typedef>
    <typedef name="nx_int16_t" ref="0xb7c1a9f8" loc="432:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="short" size="I:2" alignment="I:1" network="nx_int16_t">
        <typename><typedef-ref name="nx_int16_t" ref="0xb7c1a9f8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__gwchar_t" ref="0xb7cfce40" loc="34:/usr/include/inttypes.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__gwchar_t" ref="0xb7cfce40"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ICR1L_t" ref="0xb74d3d10" loc="292:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ICR1L_t" ref="0xb74d3d10"/></typename>
      </type-int>
    </typedef>
    <typedef name="register_t" ref="0xb7bbb360" loc="205:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="register_t" ref="0xb7bbb360"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_barrierattr_t" ref="0xb7ba40c8" loc="249:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-tag size="I:4" alignment="I:4"><union-ref ref="0xb7ba5e40"/>
        <typename><typedef-ref name="pthread_barrierattr_t" ref="0xb7ba40c8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_ETIMSK_t" ref="0xb74d0810" loc="309:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74d05e8"/>
        <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0xb74d0810"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128TimerControl_t" ref="0xb74e60c8" loc="108:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <documentation loc="11:/opt/tinyos-main-2.1.2/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e8e40"/>
        <typename><typedef-ref name="Atm128TimerControl_t" ref="0xb74e60c8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="ssize_t" ref="0xb7bc08c8" loc="109:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="ssize_t" ref="0xb7bc08c8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__quad_t" ref="0xb7be4f18" loc="55:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__quad_t" ref="0xb7be4f18"/></typename>
      </type-int>
    </typedef>
    <typedef name="int32_t" ref="0xb7f11d78" loc="38:/usr/include/stdint.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int32_t" ref="0xb7f11d78"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint64_t" ref="0xb7d00920" loc="58:/usr/include/stdint.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint64_t" ref="0xb7d00920"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_long" ref="0xb7bc3968" loc="36:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="u_long" ref="0xb7bc3968"/></typename>
      </type-int>
    </typedef>
    <typedef name="__nesc_atomic_t" ref="0xb7791d78" loc="94:/opt/tinyos-main-2.1.2/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__nesc_atomic_t" ref="0xb7791d78"/></typename>
      </type-int>
    </typedef>
    <typedef name="_LIB_VERSION_TYPE" ref="0xb7a6c2c0" loc="354:/usr/include/math.h">
      <type-tag size="I:4" alignment="I:4"><enum-ref ref="0xb7a6d838"/>
        <typename><typedef-ref name="_LIB_VERSION_TYPE" ref="0xb7a6c2c0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="nxle_int64_t" ref="0xb7c166d8" loc="444:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="long long" size="I:8" alignment="I:1" network="nxle_int64_t">
        <typename><typedef-ref name="nxle_int64_t" ref="0xb7c166d8"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_int16_t" ref="0xb7c17d98" loc="442:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="short" size="I:2" alignment="I:1" network="nxle_int16_t">
        <typename><typedef-ref name="nxle_int16_t" ref="0xb7c17d98"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_t" ref="0xb7bb06a8" loc="60:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="pthread_t" ref="0xb7bb06a8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__blksize_t" ref="0xb7bdea70" loc="153:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__blksize_t" ref="0xb7bdea70"/></typename>
      </type-int>
    </typedef>
    <typedef name="imaxdiv_t" ref="0xb7cf95d8" loc="284:/usr/include/inttypes.h">
      <type-tag size="I:16" alignment="I:4"><struct-ref ref="0xb7cf93b0"/>
        <typename><typedef-ref name="imaxdiv_t" ref="0xb7cf95d8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nlink_t" ref="0xb7be1290" loc="130:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__nlink_t" ref="0xb7be1290"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCCR1A_t" ref="0xb74dd4b0" loc="205:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74def28"/>
        <typename><typedef-ref name="Atm128_TCCR1A_t" ref="0xb74dd4b0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__id_t" ref="0xb7be07e8" loc="138:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__id_t" ref="0xb7be07e8"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_least32_t" ref="0xb7cffb18" loc="78:/usr/include/stdint.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint_least32_t" ref="0xb7cffb18"/></typename>
      </type-int>
    </typedef>
    <typedef name="__mbstate_t" ref="0xb7a4c8b0" loc="94:/usr/include/wchar.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0xb7a4c688"/>
        <typename><typedef-ref name="__mbstate_t" ref="0xb7a4c8b0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="message_footer_t" ref="0xb7822408" loc="57:/opt/tinyos-main-2.1.2/tos/lib/tossim/platform_message.h">
      <type-tag size="I:2" alignment="I:1"><union-ref name="message_footer" ref="0xb7822010"/>
        <typename><typedef-ref name="message_footer_t" ref="0xb7822408"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_OCR3BH_t" ref="0xb74d3068" loc="285:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3BH_t" ref="0xb74d3068"/></typename>
      </type-int>
    </typedef>
    <typedef name="__WAIT_STATUS" ref="0xb7bd6b40" loc="71:/usr/include/stdlib.h">
      <type-tag size="I:4" alignment="I:4"><union-ref ref="0xb7bd6800"/>
        <typename><typedef-ref name="__WAIT_STATUS" ref="0xb7bd6b40"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__blkcnt64_t" ref="0xb7bdd010" loc="159:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__blkcnt64_t" ref="0xb7bdd010"/></typename>
      </type-int>
    </typedef>
    <typedef name="fsblkcnt_t" ref="0xb7bb0190" loc="239:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="fsblkcnt_t" ref="0xb7bb0190"/></typename>
      </type-int>
    </typedef>
    <typedef name="off_t" ref="0xb7bc0238" loc="86:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="off_t" ref="0xb7bc0238"/></typename>
      </type-int>
    </typedef>
    <typedef name="__u_short" ref="0xb7be6608" loc="31:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__u_short" ref="0xb7be6608"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_int64_t" ref="0xb7c192d0" loc="434:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="long long" size="I:8" alignment="I:1" network="nx_int64_t">
        <typename><typedef-ref name="nx_int64_t" ref="0xb7c192d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="quad_t" ref="0xb7bc3ba8" loc="37:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="quad_t" ref="0xb7bc3ba8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__suseconds_t" ref="0xb7be0f00" loc="141:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__suseconds_t" ref="0xb7be0f00"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_barrier_t" ref="0xb7ba5988" loc="243:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-tag size="I:20" alignment="I:4"><union-ref ref="0xb7ba5760"/>
        <typename><typedef-ref name="pthread_barrier_t" ref="0xb7ba5988"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128TimerCtrlClock_t" ref="0xb74d7858" loc="259:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74d7630"/>
        <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0xb74d7858"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__int8_t" ref="0xb7be6c88" loc="36:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__int8_t" ref="0xb7be6c88"/></typename>
      </type-int>
    </typedef>
    <typedef name="_G_fpos64_t" ref="0xb7a4b6b8" loc="30:/usr/include/_G_config.h">
      <type-tag size="I:16" alignment="I:4"><struct-ref ref="0xb7a4b490"/>
        <typename><typedef-ref name="_G_fpos64_t" ref="0xb7a4b6b8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__clockid_t" ref="0xb7bde5b0" loc="147:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__clockid_t" ref="0xb7bde5b0"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast16_t" ref="0xb7cfdbf8" loc="109:/usr/include/stdint.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint_fast16_t" ref="0xb7cfdbf8"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR3AL_t" ref="0xb74d4db8" loc="284:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3AL_t" ref="0xb74d4db8"/></typename>
      </type-int>
    </typedef>
    <typedef name="uintmax_t" ref="0xb7cfca60" loc="140:/usr/include/stdint.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uintmax_t" ref="0xb7cfca60"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_am_addr_t" ref="0xb782d410" loc="8:/opt/tinyos-main-2.1.2/tos/types/AM.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
        <typename><typedef-ref name="nx_am_addr_t" ref="0xb782d410"/></typename>
      </type-int>
    </typedef>
    <typedef name="__clock_t" ref="0xb7be00c8" loc="135:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__clock_t" ref="0xb7be00c8"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_uint16_t" ref="0xb7c19ba0" loc="436:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
        <typename><typedef-ref name="nx_uint16_t" ref="0xb7c19ba0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__rlim_t" ref="0xb7be0328" loc="136:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__rlim_t" ref="0xb7be0328"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_quad_t" ref="0xb7bc3e10" loc="38:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="u_quad_t" ref="0xb7bc3e10"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast32_t" ref="0xb7cfd4b8" loc="97:/usr/include/stdint.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int_fast32_t" ref="0xb7cfd4b8"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_least16_t" ref="0xb7d00df8" loc="66:/usr/include/stdint.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="int_least16_t" ref="0xb7d00df8"/></typename>
      </type-int>
    </typedef>
    <typedef name="ldiv_t" ref="0xb7bd46f0" loc="109:/usr/include/stdlib.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0xb7bd44c8"/>
        <typename><typedef-ref name="ldiv_t" ref="0xb7bd46f0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_int64_t" ref="0xb7bbb010" loc="203:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="u_int64_t" ref="0xb7bbb010"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_int16_t" ref="0xb7bbc958" loc="201:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="u_int16_t" ref="0xb7bbc958"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TIFR_t" ref="0xb74e02f0" loc="163:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e00c8"/>
        <typename><typedef-ref name="Atm128_TIFR_t" ref="0xb74e02f0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCCR3A_t" ref="0xb74dd7f8" loc="208:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74def28"/>
        <typename><typedef-ref name="Atm128_TCCR3A_t" ref="0xb74dd7f8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uint_least64_t" ref="0xb7cffdc0" loc="83:/usr/include/stdint.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint_least64_t" ref="0xb7cffdc0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__int32_t" ref="0xb7be4580" loc="40:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__int32_t" ref="0xb7be4580"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_rwlock_t" ref="0xb7ba7858" loc="222:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-tag size="I:32" alignment="I:4"><union-ref ref="0xb7ba75d0"/>
        <typename><typedef-ref name="pthread_rwlock_t" ref="0xb7ba7858"/></typename>
      </type-tag>
    </typedef>
    <typedef name="double_t" ref="0xb7b5fa90" loc="37:/usr/include/i386-linux-gnu/bits/mathdef.h">
      <type-float cname="long double" size="I:12" alignment="I:4">
        <typename><typedef-ref name="double_t" ref="0xb7b5fa90"/></typename>
      </type-float>
    </typedef>
    <typedef name="__fd_mask" ref="0xb7bb8170" loc="54:/usr/include/i386-linux-gnu/sys/select.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__fd_mask" ref="0xb7bb8170"/></typename>
      </type-int>
    </typedef>
    <typedef name="bool" ref="0xb79f0d38" loc="65:/opt/tinyos-main-2.1.2/tos/lib/tossim/tos.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0xb79f0d38"/></typename>
      </type-int>
    </typedef>
    <typedef name="__fsblkcnt64_t" ref="0xb7bdd568" loc="163:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__fsblkcnt64_t" ref="0xb7bdd568"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_noise_hash_t" ref="0xb794b538" loc="71:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
        <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
      </documentation>
      <type-tag size="I:480" alignment="I:4"><struct-ref name="sim_noise_hash_t" ref="0xb794c8e8"/>
        <typename><typedef-ref name="sim_noise_hash_t" ref="0xb794b538"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__FILE" ref="0xb7a4fc50" loc="64:/usr/include/stdio.h">
      <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0xb7a4f770"/>
        <typename><typedef-ref name="__FILE" ref="0xb7a4fc50"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__gnuc_va_list" ref="0xb7a4ba10" loc="40:/usr/lib/gcc/i686-linux-gnu/4.8/include/stdarg.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="V:" alignment="V:"><struct-ref ref="0xb7f23f48"/></type-tag>
        <typename><typedef-ref name="__gnuc_va_list" ref="0xb7a4ba10"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="nxle_uint8_t" ref="0xb7c16b58" loc="445:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nxle_uint8_t">
        <typename><typedef-ref name="nxle_uint8_t" ref="0xb7c16b58"/></typename>
      </type-int>
    </typedef>
    <typedef name="__off64_t" ref="0xb7be1740" loc="132:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__off64_t" ref="0xb7be1740"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ICR3H_t" ref="0xb74d2010" loc="293:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ICR3H_t" ref="0xb74d2010"/></typename>
      </type-int>
    </typedef>
    <typedef name="__fsfilcnt64_t" ref="0xb7bddac0" loc="167:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__fsfilcnt64_t" ref="0xb7bddac0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR3AH_t" ref="0xb74d4b30" loc="283:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3AH_t" ref="0xb74d4b30"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR3CL_t" ref="0xb74d3800" loc="288:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3CL_t" ref="0xb74d3800"/></typename>
      </type-int>
    </typedef>
    <typedef name="int64_t" ref="0xb7d00010" loc="43:/usr/include/stdint.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int64_t" ref="0xb7d00010"/></typename>
      </type-int>
    </typedef>
    <typedef name="int16_t" ref="0xb7f11b88" loc="37:/usr/include/stdint.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="int16_t" ref="0xb7f11b88"/></typename>
      </type-int>
    </typedef>
    <typedef name="ulong" ref="0xb7bbfe38" loc="150:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="ulong" ref="0xb7bbfe38"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast64_t" ref="0xb7cfd730" loc="99:/usr/include/stdint.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int_fast64_t" ref="0xb7cfd730"/></typename>
      </type-int>
    </typedef>
    <typedef name="uid_t" ref="0xb7bc0010" loc="80:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uid_t" ref="0xb7bc0010"/></typename>
      </type-int>
    </typedef>
    <typedef name="__syscall_slong_t" ref="0xb7bdc1e0" loc="175:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__syscall_slong_t" ref="0xb7bdc1e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="message_t" ref="0xb7821a30" loc="19:/opt/tinyos-main-2.1.2/tos/types/message.h">
      <type-tag size="I:41" alignment="I:1"><nx_struct-ref name="message_t" ref="0xb7822c30"/>
        <typename><typedef-ref name="message_t" ref="0xb7821a30"/></typename>
      </type-tag>
    </typedef>
    <typedef name="nx_uint64_t" ref="0xb7c174a8" loc="438:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:1" network="nx_uint64_t">
        <typename><typedef-ref name="nx_uint64_t" ref="0xb7c174a8"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TIMSK_t" ref="0xb74e3b78" loc="146:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74e3950"/>
        <typename><typedef-ref name="Atm128_TIMSK_t" ref="0xb74e3b78"/></typename>
      </type-tag>
    </typedef>
    <typedef name="loff_t" ref="0xb7bc12a8" loc="44:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="loff_t" ref="0xb7bc12a8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__socklen_t" ref="0xb7bda0d8" loc="189:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__socklen_t" ref="0xb7bda0d8"/></typename>
      </type-int>
    </typedef>
    <typedef name="node_t" ref="0xb7991168" loc="65:/opt/tinyos-main-2.1.2/tos/lib/tossim/heap.c">
      <type-tag size="I:12" alignment="I:4"><struct-ref name="node" ref="0xb7992cb0"/>
        <typename><typedef-ref name="node_t" ref="0xb7991168"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__uid_t" ref="0xb7be26c8" loc="125:/usr/include/i386-linux-gnu/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__uid_t" ref="0xb7be26c8"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_int8_t" ref="0xb7c1a5a0" loc="431:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="signed char" size="I:1" alignment="I:1" network="nx_int8_t">
        <typename><typedef-ref name="nx_int8_t" ref="0xb7c1a5a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_noise_node_t" ref="0xb7949b50" loc="83:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_noise.h">
      <type-tag size="I:68" alignment="I:4"><struct-ref name="sim_noise_node_t" ref="0xb794b820"/>
        <typename><typedef-ref name="sim_noise_node_t" ref="0xb7949b50"/></typename>
      </type-tag>
    </typedef>
    <typedef name="id_t" ref="0xb7bc0678" loc="104:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="id_t" ref="0xb7bc0678"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_mutex_t" ref="0xb7bac1c8" loc="128:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-tag size="I:24" alignment="I:4"><union-ref ref="0xb7badef8"/>
        <typename><typedef-ref name="pthread_mutex_t" ref="0xb7bac1c8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__itimer_which_t" ref="0xb79521e0" loc="120:/usr/include/i386-linux-gnu/sys/time.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__itimer_which_t" ref="0xb79521e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_cond_t" ref="0xb7ba9010" loc="154:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-tag size="I:48" alignment="I:4"><union-ref ref="0xb7babd28"/>
        <typename><typedef-ref name="pthread_cond_t" ref="0xb7ba9010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="pthread_key_t" ref="0xb7ba9930" loc="164:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="pthread_key_t" ref="0xb7ba9930"/></typename>
      </type-int>
    </typedef>
    <typedef name="ino_t" ref="0xb7bc14d0" loc="48:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="ino_t" ref="0xb7bc14d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="daddr_t" ref="0xb7bc0b18" loc="115:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="daddr_t" ref="0xb7bc0b18"/></typename>
      </type-int>
    </typedef>
    <typedef name="__timezone_ptr_t" ref="0xb7957238" loc="61:/usr/include/i386-linux-gnu/sys/time.h">
      <documentation loc="32:/opt/tinyos-main-2.1.2/tos/lib/tossim/sim_mote.h">
        <short>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.</short>
        <long>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-qualified __restrict="">
          <typename><typedef-ref name="__timezone_ptr_t" ref="0xb7957238"/></typename>
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:8" alignment="I:4"><struct-ref name="timezone" ref="0xb7958bb0"/></type-tag>
        </type-pointer>
      </type-qualified>
    </typedef>
    <typedef name="nxle_uint32_t" ref="0xb7c144c0" loc="447:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nxle_uint32_t">
        <typename><typedef-ref name="nxle_uint32_t" ref="0xb7c144c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="key_t" ref="0xb7bbf010" loc="122:/usr/include/i386-linux-gnu/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="key_t" ref="0xb7bbf010"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_mutexattr_t" ref="0xb7bac890" loc="134:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-tag size="I:4" alignment="I:4"><union-ref ref="0xb7bac668"/>
        <typename><typedef-ref name="pthread_mutexattr_t" ref="0xb7bac890"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__pthread_slist_t" ref="0xb7bae670" loc="84:/usr/include/i386-linux-gnu/bits/pthreadtypes.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref name="__pthread_internal_slist" ref="0xb7bae1c0"/>
        <typename><typedef-ref name="__pthread_slist_t" ref="0xb7bae670"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uart_id_t" ref="0xb782a678" loc="83:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
      <documentation loc="71:/opt/tinyos-main-2.1.2/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uart_id_t" ref="0xb782a678"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128TimerCtrlCompare_t" ref="0xb74dd168" loc="202:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0xb74def28"/>
        <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0xb74dd168"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_OCR1CH_t" ref="0xb74d4610" loc="279:/opt/tinyos-main-2.1.2/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1CH_t" ref="0xb74d4610"/></typename>
      </type-int>
    </typedef>
    <typedef name="__nesc_sillytask_startDoneTask" ref="0xb75b9830" loc="96:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-array elements="I:0" size="I:0" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_stopDoneTask" ref="0xb765be68" loc="101:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-array elements="I:1" size="I:4" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_sendDoneTask" ref="0xb765b550" loc="145:/opt/tinyos-main-2.1.2/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-array elements="I:2" size="I:8" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="receive_message_t" ref="0xb75b5b58" loc="64:/opt/tinyos-main-2.1.2/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-tag size="I:48" alignment="I:4"><struct-ref name="receive_message" scoped="" ref="0xb75b5878"/>
        <typename><typedef-ref name="receive_message_t" scoped="" ref="0xb75b5b58"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nesc_sillytask_fired" ref="0xb74edc68" loc="74:/opt/tinyos-main-2.1.2/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="AlarmToTimerC"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_updateFromTimer" ref="0xb73c0a58" loc="71:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="Timer_t" ref="0xb73b7c88" loc="66:/opt/tinyos-main-2.1.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-tag size="I:12" alignment="I:4"><struct-ref scoped="" ref="0xb73b7940"/>
        <typename><typedef-ref name="Timer_t" scoped="" ref="0xb73b7c88"/></typename>
      </type-tag>
    </typedef>
    <typedef name="queue_entry_t" ref="0xb733c4b8" loc="57:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-tag size="I:4" alignment="I:4"><struct-ref scoped="" ref="0xb733c2f0"/>
        <typename><typedef-ref name="queue_entry_t" scoped="" ref="0xb733c4b8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nesc_sillytask_errorTask" ref="0xb7341208" loc="169:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_CancelTask" ref="0xb7341b20" loc="126:/opt/tinyos-main-2.1.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
  </typedefs>
</nesc>
